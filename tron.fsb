\ Tron
\ Versión 201503230314
\ Escrito en Forth para ZX Spectrum

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ Licencia/Permesilo/License: http://programandala.net/lp

\ http://programandala.net/es.programa.tron.html

  \ -----------------------------------------------------------
  \ Requisitos

  \ Para convertir este fichero fuente en un fichero TAP
  \ utilizable por Abersoft Forth en un emulador de ZX Spectrum
  \ se necesita el conversor fsb:
  \
  \ http://programandala.net/es.programa.fsb.html

  \ -----------------------------------------------------------
  \ Historia del desarrollo
  \
  \ 1985-04: Conversión a Abersoft Forth del original en
  \ Sinclair BASIC publicado en la enciclopedia _Mi computer_,
  \ tomo 5, página 1112.
  \
  \ 2009-05: Conversión del fichero TAP original en un fichero
  \ de texto para su publicación, con algunos cambios.
  \
  \ 2015-03: Conversión al formato fsb
  \ (http://programandala.net/es.programa.fsb.html).  Muchas
  \ mejoras: Textos reescritos usando gráficos para los
  \ caracteres castellanos; instrucciones integradas en el
  \ código, no simplemente escritas en un bloque fuente;
  \ créditos; renombrado general de palabras, factorización y
  \ uso de constantes para hacer el código más claro; arreglo
  \ de la lectura de teclado (el método original no funcionaba
  \ en el emulador); simplificación de algoritmos.

  \ XXX FIXME -- the system gets corrupted after quitting the
  \ game, no word is recognized.

( Tools, ZX Spectrum specific; load the rest)

FORTH DEFINITIONS
 
  \ ----------------------------
  \ Some standard and common usage words Abersoft Forth lacks

: \  ( "ccc<newline>" -- )
  IN @ DUP C/L > IF  B/BUF SWAP MOD  ELSE  C/L SWAP - THEN
  IN +!  ; IMMEDIATE
: CHAR  ( "name" -- c )  BL WORD HERE 1+ C@  ;
: [CHAR]  ( "name" -- c )  CHAR [COMPILE] LITERAL  ; IMMEDIATE
: THRU  ( n1 n2 -- )  1+ SWAP DO  I LOAD  LOOP  ;
  \ Abersoft Forth's `EXIT` just does a `RDROP`, so:
: RDROP  ( R: x -- )  EXIT  ;
  \ And this is what `EXIT` is supposed to do:
 \ : EXIT  ( -- )  [COMPILE] ;S  ; IMMEDIATE
: EXIT  ( -- )  COMPILE [COMPILE] ;S  ; IMMEDIATE
: BYE MON  ;
  \ 'MON' could be actually renamed to 'BYE' this way:
    \ ' MON NFA 1+
    \ CHAR B OVER C!
    \ CHAR Y OVER 1+ C!
    \ CHAR E 128 + SWAP 2+ C!

  \ ----------------------------
  \ Some Abersoft Forth specific extensions

  \ Load the given block from the next file on the tape:
: TLOAD  ( n -- )  INIT-DISC LOADT LOAD  ;
  \ Load block 1 from the next file on the tape:
: RUNT  ( -- )  1 TLOAD  ;

  \ ----------------------------
  \ ZX Spectrum specific

  \ Memory addresses

22528 CONSTANT ATTRIBUTES

  \ System variables

23677 DUP CONSTANT X-COORD  1+ CONSTANT Y-COORD

  \ Color constants

0 CONSTANT BLACK   2 CONSTANT RED    5 CONSTANT CYAN
6 CONSTANT YELLOW  7 CONSTANT WHITE

  \ ----------------------------
  \ Load the rest

2 10 THRU

( Vocabulary, variables and constants)

  \ ----------------------------
  \ Game vocabulary

: TASK  ;
VOCABULARY TRON IMMEDIATE  TRON DEFINITIONS

  \ ----------------------------
  \ Game variables and constants

     \ Player 1            Player 2
 \   1 VARIABLE HUMAN1     0 VARIABLE HUMAN2  \ human? XXX TODO
     0 VARIABLE SCORE1     0 VARIABLE SCORE2  \ scores
     0 VARIABLE XC1        0 VARIABLE XC2     \ X coordinate
     0 VARIABLE YC1        0 VARIABLE YC2     \ Y coordinate
     0 VARIABLE XINC1      0 VARIABLE XINC2   \ X inc (-1..1)
     0 VARIABLE YINC1      0 VARIABLE YINC2   \ Y inc (-1..1)
YELLOW CONSTANT COLOR1  CYAN CONSTANT COLOR2  \ ink color

  \ ----------------------------
  \ Generic constants

  CHAR n CONSTANT 'n'
  CHAR s CONSTANT 's'

( Graphics)

: RDRAW  ( inc-x inc-y -- )
  \ Draw a relative line (from the current plot position).
  Y-COORD C@ + SWAP X-COORD C@ + SWAP DRAW  ;

: XY>ATTRA  ( x y -- a )
  \ Convert a pixel coordinate to its attribute address.
  175 SWAP - 8 / 32 *  SWAP 8 /  + ATTRIBUTES +  ;

: PAINT  ( n x y -- )
  \ Plot at the given coordinates with color n.
  \ XXX TODO Check this:
  \ It seems the attribute address is used here
  \ instead of `INK`, in order to get certain effect
  \ related with the crashes.
  2DUP PLOT XY>ATTRA C!  ;

: WIPE  ( -- )
  \ Clear the screen with the default colors.
  BLACK PAPER  BLACK BORDER  WHITE INK  CLS  ;

( User Defined Graphics)

 \ Translate the Latin1 Spanish chars in this source file
 \ to ZX Spectrum UDG:

 \ #vim %substitute@á@\=nr2char(144)@g
 \ #vim %substitute@é@\=nr2char(148)@g
 \ #vim %substitute@í@\=nr2char(152)@g
 \ #vim %substitute@ó@\=nr2char(158)@g
 \ #vim %substitute@ú@\=nr2char(162)@g
 \ #vim %substitute@¿@\=nr2char(153)@g

: UDG!  ( b0..b7 c -- )
  \ Store the given 8 bytes into the c UDG char
  \ c = 144..164 (144..162 on 128K models)
  \ b0 = first (top) scan
  \ b7 = last (bottom) scan
  144 - 8 * UDG + 1 - DUP 8 + DO  I C!  -1 +LOOP  ;

HEX
  08 10 38 04 3C 44 3C 00  90 UDG! \ á
  \ 04 08 3C 42 7E 42 42 00  00 UDG! \ Á
  08 10 38 44 78 40 3C 00  94 UDG! \ é
  \ 04 08 7E 40 7C 40 7E 00  00 UDG! \ É
  08 10 00 30 10 10 38 00  98 UDG! \ í
  \ 04 08 3E 08 08 08 3E 00  00 UDG! \ Í
  08 10 38 44 44 44 38 00  9E UDG! \ ó
  \ 08 10 3C 42 42 42 3C 00  00 UDG! \ Ó
  08 10 44 44 44 44 38 00  A2 UDG! \ ú
  \ 04 4A 42 42 42 42 3C 00  00 UDG! \ Ú
  \ 00 78 00 78 44 44 44 00  00 UDG! \ ñ
  \ 3C 00 62 52 4A 46 42 00  00 UDG! \ Ñ
  \ 44 00 44 44 44 44 38 00  00 UDG! \ ü
  \ 42 00 42 42 42 42 3C 00  00 UDG! \ Ü
  00 10 00 10 20 42 3C 00  99 UDG! \ ¿
DECIMAL

( Screen and keyboard)

  \ ----------------------------
  \ Screen

: STATUS  ( -- )
  \ Show the status bar at the current cursor position.
  COLOR1 INK ."  Moto 1:" SCORE1 ?
  0 22 AT COLOR2 INK ." Moto 2:" SCORE2 ?  ;

: FRAME  ( -- )
  \ Draw the frame.
  RED INK 8 DUP PLOT 239 0 RDRAW 0 159 RDRAW
  -239 0 RDRAW 0 -159 RDRAW  ;

  \ Draw the arena.
: ARENA  ( -- )  WIPE STATUS FRAME  ;

  \ ----------------------------
  \ Keyboard

: AKEY  ( -- c )
  \ Wait for a key press and return its code.  This is an
  \ alternative to Abersoft Forth's 'KEY', because it always
  \ shows the flashing cursor, even if the current attributes
  \ are changed.
  BEGIN  INKEY DUP 255 =  WHILE  DROP  REPEAT  ;

  \ Wait for a key press.
: PAUSE  ( -- )  8 SPACES  ." Pulsa una tecla" AKEY  ;

  \ Convert a char in the range A-Z to lowercase
  \ (Warning: no check!, chars other than A-Z get corrupted):
: LOWER  ( c -- c' )  32 OR  ;

  \ Is the given char a valid answer for a Y/N question?
: Y/N?  ( c -- flag )  LOWER DUP 's' = SWAP 'n' = OR  ;

  \ Wait for a valid key press for a Y/N question
  \ and return its code.
: Y/N  ( -- c )  BEGIN  AKEY DUP Y/N? 0= WHILE DROP REPEAT  ;

  \ Wait for a valid key press for a Y/N question
  \ and return a flag: Was it "N" or "n"?
: NO?  ( -- flag )  Y/N LOWER 'n' =  ;

: PRESSED?  ( bitmask port -- flag )  INP AND NOT  ;

( Game init, crash effect, key identifiers)

  \ ----------------------------
  \ Game init

: RESET  ( -- )
  \ Reset the game variables.
  40 XC1 ! 88 YC1 ! 215 XC2 ! 88 YC2 !
  1 XINC1 ! 0 YINC1 ! -1 XINC2 ! 0 YINC2 ! ;

: INIT  ( -- )  ARENA RESET  ;

  \ ----------------------------
  \ Crash effect

: CRASH  ( -- )
  \ Crash effect.
  \ XXX OLD
  \ n = color of the player who crashed
  \  INK 1 BRIGHT 175 YC1 @ - 8 / XC1 @ 8 / AT SPACE
  100 50 DO  11 I BLEEP  LOOP  ;

  \ Is player 1's next position occupied?
: CRASH1?  ( -- flag )  XC1 @ YC1 @ POINT  ;
  \ Is player 2's next position occupied?
: CRASH2?  ( -- flag )  XC2 @ YC2 @ POINT  ;

  \ ----------------------------
  \ Key identifiers (bitmask and port)

HEX   1 DFFE 2CONSTANT K-P   1 BFFE 2CONSTANT K-EN
      4 7FFE 2CONSTANT K-M   8 7FFE 2CONSTANT K-N
      \ 1 FBFE 2CONSTANT K-Q 1 FDFE 2CONSTANT K-A
      \ 4 FEFE 2CONSTANT K-X 8 FEFE 2CONSTANT K-C
     10 F7FE 2CONSTANT K-5   4 EFFE 2CONSTANT K-8
      8 EFFE 2CONSTANT K-7  10 EFFE 2CONSTANT K-6   DECIMAL

( Player keys, rudders)

  \ ----------------------------
  \ Player keys

  \ Player 1 (default)
  \ K-Q 2VARIABLE UP-K1    K-A 2VARIABLE DOWN-K1
  \ K-X 2VARIABLE LEFT-K1  K-C 2VARIABLE RIGHT-K1

  \ Player 1 (debugging)
K-7 2VARIABLE UP-K1    K-6 2VARIABLE DOWN-K1
K-5 2VARIABLE LEFT-K1  K-8 2VARIABLE RIGHT-K1

  \ Player 2
K-P 2VARIABLE UP-K2 K-EN 2VARIABLE DOWN-K2
K-M 2VARIABLE LEFT-K2 K-N 2VARIABLE RIGHT-K2

  \ ----------------------------
  \ Rudders
0  1 2CONSTANT UP-INC
0 -1 2CONTANTS
: RUDDERS  ( -- )

  \ Check the keyboard
  \ and update the increments and the coordinates.

     UP-K1 2@ PRESSED? IF   0 XINC1 !  1 YINC1 !  THEN
   DOWN-K1 2@ PRESSED? IF   0 XINC1 ! -1 YINC1 !  THEN
   LEFT-K1 2@ PRESSED? IF  -1 XINC1 !  0 YINC1 !  THEN
  RIGHT-K1 2@ PRESSED? IF   1 XINC1 !  0 YINC1 !  THEN

     UP-K2 2@ PRESSED? IF   0 XINC2 !  1 YINC2 !  THEN
   DOWN-K2 2@ PRESSED? IF   0 XINC2 ! -1 YINC2 !  THEN
   LEFT-K2 2@ PRESSED? IF  -1 XINC2 !  0 YINC2 !  THEN
  RIGHT-K2 2@ PRESSED? IF   1 XINC2 !  0 YINC2 !  THEN

  XINC1 @ XC1 +!  YINC1 @ YC1 +!
  XINC2 @ XC2 +!  YINC2 @ YC2 +!  ;

( Instructions)

: INSTRUCTIONS  ( -- )
  \  <------------------------------->
  1 BRIGHT
  ." Cada jugador conduce una moto" CR
  ." cuyo único control la hace girar" CR
  ." noventa grados sin frenar. Cada" CR
  ." moto deja tras de sí una pared" CR
  ." sólida de luz. El objetivo del" CR
  ." juego es hacer estrellarse al" CR
  ." contrincante con el laberinto." CR CR 0 BRIGHT  ;
  \  <------------------------------->

: THE-END  ( -- )
       \  <------------------------------->
  WIPE ." Para jugar otra vez: RUN" CR
       ." Para salir de Forth: BYE" CR  ;
       \  <------------------------------->

( Instructions, start)

: KEYS  ( -- )
  \  <------------------------------->
  ." Teclas:" CR
  ."  Jugador 1:  Q A C X" CR
  ."  Jugador 2:  P ENTER M N" CR CR  ;
  \  <------------------------------->

: CREDITS  ( -- )
  \  <------------------------------->
  RED INK
  ."               TRON" CR CR  WHITE INK
  ." Copyright (C) 1985,2009,2015" CR
  ."  Marcos Cruz (programandala.net)" CR
  ." Licencia/Permesilo/License:" CR
  ."  http://programandala.net/lp" CR CR  ;
  \  <------------------------------->

  \ ----------------------------
  \ Start

: START  ( -- )
  WIPE  CREDITS INSTRUCTIONS KEYS PAUSE
  0 SCORE1 !  0 SCORE2 !  ;

( Main)

: PAINT1  ( -- )  COLOR1 XC1 @ YC1 @ PAINT  ;
: PAINT2  ( -- )  COLOR2 XC2 @ YC2 @ PAINT  ;
: CRASH1  ( -- )  PAINT1 CRASH 1 SCORE2 +!  ;
: CRASH2  ( -- )  PAINT2 CRASH 1 SCORE1 +!  ;

: GAME  ( -- )
  INIT  BEGIN
    \ XXX FIXME `[compile] ;s` works, but `exit` doesn't:
    CRASH1? IF CRASH1 EXIT THEN
    CRASH2? IF XC2 @ XC1 ! YC2 @ YC1 ! CRASH2 EXIT THEN
    PAINT1 1 0 BLEEP  PAINT2 1 100 BLEEP  RUDDERS
  AGAIN  ;

: QUIT?  ( -- flag )
  \ Another game?
  WIPE 12 7 AT ." ¿Otra vez? (S/N)" NO?  ;

: RUN  ( -- )  START  BEGIN  GAME QUIT?  UNTIL  THE-END  ;

  \ XXX TMP Debugging tool:
  \ : ZX  BEGIN  KEY [CHAR] 0 - WHILE K-5 INP U. DROP REPEAT  ;

  \ vim: filetype=abersoftforth:fileencoding=latin1
