.( Tron 0xF: game -- part 2 )

\ tron_0xf.file_11.game.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015,2016,2020 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ -----------------------------------------------------------

  \ The author would be grateful for any constructive
  \ suggestions and bug-reports, via
  \ <http://programandala.net>.

  \ -----------------------------------------------------------

2 9 thru

( -1|1 )

create -1|1 ( -- -1 | 1 ) hex
  \ XXX OLD -- first version, with memory address as seed:
  \   here 1+             \ local_seed: equ $+1
  \   21 c, 0 ,           \ ld hl,the_seed ; patched
  \   5C76 @ over ! \ patch the_seed with system FRAMES
  \   7E c,               \ ld a,(hl)
  \   23 c,               \ inc hl
  \   22 c, ,             \ ld (local_seed),hl
  \
  \ XXX NEW -- second version, with register R
  \ (not better results, but faster and smaller code):
  ED c, 5F C,  E6 c, 01 c,
    \ ld a,r
    \ and 1 ; bit 0 only
  26 c, 00 c,  68 07 + c,  C2 c, pushhl ,
    \ ld h,0
    \ ld l,a
    \ jp nz,PUSHHL ; return 1
  2B c,  C3 c, pushhl ,
    \ dec hl
    \ jp pushhl ; return -1
  smudge decimal
  \ Return a random increment for a graphic coordinate.

  \ : test ( times -- )
  \   0 \ count
  \   swap 0 do -1|1 + loop . ;
  \ 32700 test
  \ XXX REMARK -- 2015-11-25: This bench shows the proportion
  \ of 1 and -1 is 50%.

  \ create 0|1 ( -- 0 | 1 ) hex
  \   ED c, 5F C,  E6 c, 01 c,
  \     \ ld a,r
  \     \ and 1 ; bit 0 only
  \   26 c, 00 c,  68 07 + c,
  \     \ ld h,0
  \     \ ld l,a
  \   C3 c, pushhl ,
  \     \ jp pushhl
  \   smudge decimal
  \ XXX OLD -- not used

create 0|2 ( -- 0 | 2 ) hex
  ED c, 5F C,  E6 c, 02 c,
    \ ld a,r
    \ and 2 ; bit 2 only
  26 c, 00 c,  68 07 + c,
    \ ld h,0
    \ ld l,a
  C3 c, pushhl ,
    \ jp pushhl
  smudge decimal
  \ Double the coordinate increments b1 and b2
  \ by shifting them left directly on the stack.
  \ b1' = b1 2*
  \ b2' = b2 2*

( radar )

create incs2* ( b1 b2 -- b1' b2' ) hex
  21 c, 0 ,  39 c,  CB c, 26 c,
    \ ld hl,0
    \ add hl,sp ; low byte of TOS
    \ sla (hl)
  23 c,  23 c,  CB c, 26 c,
    \ inc hl ; high byte of TOS
    \ inc hl ; low byte of 2TOS
    \ sla (hl)
  C3 c, next ,    \ jp next
  smudge decimal

create incs4* ( b1 b2 -- b1' b2' ) hex
  21 c, 0 ,  39 c,  CB c, 26 c,  CB c, 26 c,
    \ ld hl,0
    \ add hl,sp ; low byte of TOS
    \ sla (hl)
    \ sla (hl)
  23 c,  23 c,  CB c, 26 c,  CB c, 26 c,
    \ inc hl ; high byte of TOS
    \ inc hl ; low byte of 2TOS
    \ sla (hl)
    \ sla (hl)
  C3 c, next ,    \ jp next
  smudge decimal
  \ Multiply by 4 the coordinate increments b1 and b2
  \ by shifting them left directly on the stack.
  \ b1' = b1 4 *
  \ b2' = b2 4 *

here: radars ( -- a ) ' incs2* cfa ,  ' incs4* cfa ,
  \ Execution table for `radar`.

: radar ( xinc yinc -- xinc' yinc' ) radars 0|2 + @ execute ;
  \ Multiply the given coordinate increments (-1..+1)
  \ by 2 or 4.

( Robot pilot)

: crashing? ( xinc yinc -- f )
  \ XXX TODO
  \ radar player-yc @ + swap player-xc @ + swap point ;
  incs2* player-yc @ + swap player-xc @ + swap point ;
  \ Considering the given coordinate increments
  \ for the current player, is he crashing?
  \ In other words, is the next position occupied?
  \ The distance of the next position is randomly
  \ chosen.

: dodged? ( xinc yinc -- f ) crashing? 0= ;
  \ Considering the given coordinate increments
  \ for the current player,
  \ is the second next position free?

: dodge-y ( -- 0 yinc ) 0 -1|1 2dup dodged? ?exit minus ;
  \ Choose random increments to start moving on the Y axis.

: dodge-x ( -- xinc 0 )
  -1|1 0 2dup dodged? ?exit swap minus swap ;
  \ Choose random increments to start moving on the X axis.

: dodge ( -- )
  set-turn-sound player-xinc @ \ moving on the X axis?
  if dodge-y else dodge-x then player-incs 2! ;
  \ Change the direction of the current player.

:noname ( -- ) player-incs 2@ crashing? if dodge then ;
is (robot)
  \ Control procedure for robot pilots.
  \ Update the coordinate increments
  \ of the current (robot) player:
  \ If there's something ahead, change the direction.

( Human pilot)

: turn ( d -- ) player-incs 2! set-turn-sound ;

:noname ( -- )
  player-up-k @ pressed?  if
    player-xinc @ if up-incs    turn then exit then
  player-down-k @ pressed? if
    player-xinc @ if down-incs  turn then exit then
  player-left-k @ pressed? if
    player-yinc @ if left-incs  turn then exit then
  player-right-k @ pressed? if
    player-yinc @ if right-incs turn then then ;
is (human)
  \ Control procedure for human pilots.
  \ Update the coordinate increments
  \ of the current (human) player.

( duel )

: forward ( -- )
  player-xinc @ player-xc +!  player-yinc @ player-yc +! ;
  \ Update the coordinates of the current player.

: do-stop? ( -- f )
  white ink do-stop$ 2dup remark yes? >r -remark r> ;
  \ Ask "Do you want to stop?" in the current language
  \ and return a flag with the answer (true=yes).
  \ Erase the message at the end.

: stop? ( -- f )
  false  ?terminal 0= ?exit \ no Break key, exit
  drop -status do-stop?     \ ask for confirmation
  dup 0= if status then ;   \ restore the status bar
  \ Check if the Break key has been pressed; if so, confirm it.
  \ f = confirmed Break key?

( duel )

: duel ( -- f )
  duel-init begin
    max-players 0 do
      i player!  player-control @ -dup if
        execute crash? if
          killed last-one? if winner unloop false exit then
        else forward paint noise then
      then
    loop
  stop? until  true ;
  \ Game duel. Stop when a player crashes
  \ or the break key is pressed and confirmed.
  \ f = Break key pressed and confirmed?

( game )

: ?duel-end ( f -- ) ?exit akey drop ;
  \ XXX TMP

: game ( -- )
  game-init begin duel dup 0= ?duel-end until page ;
  \ Game loop.

  \ vim: filetype=abersoftforthafera
