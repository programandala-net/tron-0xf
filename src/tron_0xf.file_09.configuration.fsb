.( Tron 0xF: configuration )

\ tron_0xf.file_09.configuration.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ Max length of a player key description in any language:
11 constant /key-desc

  \ Lines of some parts of the redefine menu:
contents-line 2+ constant player-line \ player number
player-line 2+ constant pilot-line  \ human or robot
pilot-line 2+ constant keys-line  \ top keys row

  \ Column of the key description:
0 constant key-desc-col

2 11 thru

( Key descriptions )

: +key-desc-col  ( ca len line -- ca len line col' )
  \ Relative column of a key description,
  \ depending on its length; it's relative to
  \ the absolute column of the key descriptions.
  over /key-desc swap -  ;

: (type-key-desc)  ( ca len line col -- )
  \ Print a key description, on the given line.
  \ col = columns from the left margin of its region.
  key-desc-col + at type  ;

  \ XXX OLD -- not used
  \ : |key-desc|  ( ca len line -- )
  \   \ Print a key description, on the given line,
  \   \ centered on its region.
  \   +key-desc-col 2 / (type-key-desc)  ;

: |key-desc  ( ca len line -- )
  \ Print a key description, on the given line,
  \ at the left of its region.
  0 (type-key-desc)  ;

  \ XXX OLD -- not used
  \ : key-desc|  ( ca len line -- )
  \   \ Print a key description, on the given line,
  \   \ at the right of its region.
  \   over key-desc-col swap - (type-key-desc)  ;
  
( Key descriptions )

here: key-descs
  \  This table contains the cfa of the four texts used
  \  to describe the player keys. When executed, they
  \  return a string in the current language.
  ' up$ cfa , ' down$ cfa , ' left$ cfa , ' right$ cfa ,

: key-desc  ( n -- ca len )
  \ Get the _n_ text from the `key-descs` table.
  key-descs swap >execute  ;
  
: key.  ( line col a -- )
  \ Print a key name.
  \ line col = screen coordinates
  \ a = key address in the keys table
  key-name 2swap at type  ;

: player-key.  ( line col n -- )
  \ Print the name of the given key of the current player.
  \ line col = screen coordinates
  \ n = key number in the table 
  cells player-keys + @ key.  ;

( Keys position)

here: key-columns
  \ Columns of the player keys.
  12 c, 19 c, 26 c,

: pilot-col  ( n -- col )
  \ Column of the pilot number _n_.
  key-columns + c@  ;

: player-col  ( -- col )
  \ Column of the current player.
  player pilot-col  ;

: key#>coords  ( n -- line col )
  \ Convert a key number (0..3) of the current player
  \ to the cursor coordinates of the key in the redefine menu.
  keys-line + player-col ;

: (key-prompt)  ( n f -- )
  \ Activate or deactivate the prompt of a key
  \ of the current player.
  \ n = key number in the current players' key table 
  \ f = flash?
  flash dup key#>coords rot player-key.  ;

: +key-prompt  ( a n -- )
  \ Activate the prompt of a current player's key.
  \ n = key number in the current players' key table 
  1 (key-prompt) 0 flash  ;

: -key-prompt  ( a n -- )
  \ Deactivate the prompt of a current player's key.
  \ n = key number in the current players' key table 
  0 (key-prompt) space  ;

( Pilot -- human, robot or none )

here: pilot-controls  \ table of cfa
  human , robot , none ,

: pilot-key?  ( c -- n tf | ff )
  \ Is the given (uppercase) char _c_
  \ a valid answer for a pilot option?
  s" HRN"  \ valid keys (the same in the three languages)
  players 1 = minus +  \ remove "N" if players=1
  char-in-string?  ;

: pilot-option  ( -- n )
  \ Wait for a valid key press for a pilot option
  \ and return its index (0..2) in the `pilot-controls`
  \ table.
  begin  akey upperc pilot-key?  until  ;

: pilot-control  ( -- cfa | 0 )
  \ Wait for a valid key press for a pilot option
  \ and return the cfa of the correspondent control
  \ word (for human or robot), or zero (for none).
  pilot-option cells pilot-controls + @  ;

( Redefine the pilot )

  \ Print the pilot of the current player.
: at-pilot  ( -- )  pilot-line player-col at  ;
: .pilot  ( -- )  at-pilot human|robot|none$ type  ;

: player-controls  ( -- )
  \ Init every `player-control` with `player-pilot`.
  max-players 0 do
    i player!  player-pilot @ player-control !
  loop  ;

: update-players  ( -- )
  \ Update the number of actual players,
  \ by counting how many players are human or robot.
  player-controls
  0  max-players 0 do
       i player!  player-control @ 0<> +
     loop  to players  ;

: change-pilot  ( -- )
  \ Change the pilot of the current player.
  pilot-help$ remark  1 flash .pilot 0 flash
  pilot-control player-pilot !
  .pilot  pilot-help$ -remark  ;

( Redefine keys )

  \ XXX OLD
  \ XXX FIXME when Break is used, a wrong char is shown
  \ : redefine-keys  ( -- f )
  \   \ Redefine the keys of the current player.
  \   \ f = quit redefining?
  \   false  \ default return flag
  \   keys/player 0 do
  \     player-keys i +key-prompt  512 ms pressed  ( a | ff )
  \     -dup 0= if  -key-prompt unloop 0= exit  then
  \     dup player-keys i cells + !  i key#>coords rot key. space
  \   loop  ;

: redefine-keys  ( -- )
  \ Redefine the keys of the current player.
  keys/player 0 do
    i +key-prompt
    512 ms pressed player-keys i cells + !
    i -key-prompt  
  loop  ;

( Redefine keys menu column )

  \ Print the number of the current player.
: at-player  ( -- )  player-line player-col at  ;
: .player  ( -- )  at-player player .  ;

: redefine-menu-key  ( n -- )
  \ Show a key of the redefine keys menu,
  \ for the 'n' key of the current player.
  dup >r keys-line + player-col r> player-key.  ;

: hide-keys  ( -- )
  \ Hide the keys of the current player.
  keys/player 0 do
    keys-line i + player-col at 2 spaces
  loop  ;

: show-keys  ( -- )
  \ Show the keys of the current player.
  keys/player 0 do  i redefine-menu-key  loop  ;


  \ XXX OLD
  \ : -redefine-menu-column  ( n -- )
  \   \ Erase a column of the redefine keys menu
  \   \ for the current player.
  \   at-player space  at-pilot human|robot|none$ type-spaces
  \   hide-keys  ;

  \ XXX OLD
  \ : redefine-menu-column  ( n -- )
  \   \ Show a column of the redefine keys menu,
  \   \ for the current player.
  \   red ink .player  white ink .pilot
  \   human? if  show-keys  else  hide-keys  then  ;

( Redefine keys menu )

: redefine-menu-row-headers  ( -- )
  \ Show the row headers of the redefine keys menu.
  red ink  pilot$ pilot-line 0 at type
  \ Names of the keys at the left.
  keys/player 0 do  i key-desc keys-line i + |key-desc  loop ;

: player-numbers  ( f -- )
  \ Print the player numbers at the top of the columns.
  \ f = active pilot menu?

  \ XXX FIXME Because of a bug in Afera's improved `inverse`,
  \ the `ink` must be before the `inverse`, otherwise `inverse`
  \ does nothing. Meanwhile, `inverse` is not redefined by
  \ Afera.

  inverse white ink 
  max-players 0 do
    player-line i pilot-col at i s->d 0 d.r
  loop  0 inverse  ;

: redefine-menu-headers  ( f -- )
  \ f = active pilot menu?
  player-numbers redefine-menu-row-headers  ;

( redefine-menu )

: redefine-menu  ( f -- )
  \ Show the redefine keys menu.
  \ f = active pilot menu?
  wipe-contents redefine-menu-headers  white ink
  max-players 0 do
    i player! .pilot
    human? if  show-keys  else  hide-keys  then
  loop  ;

( Redefine )

  \ XXX OLD
  \ : do-change?  ( -- f )
  \   \ Ask "Do you want to change something?" in the current
  \   \ language and return a flag with the answer (true=yes).
  \   \ The message is deleted.
  \   do-change$ bottom-line      2dup 2>r
  \   white ink |linetype| yes?   2r> |linespaces|  ;

: (redefine)  ( n -- )
  \ Config the pilot number _n_.
  white ink  false player-numbers
  player! change-pilot human?
  if    show-keys redefine-keys
  else  hide-keys
  then  update-players true player-numbers  ;

  \ : redefine  ( -- )
  \   \ Redefine the pilot and keys of all players.
  \   max-players 0 do
  \     i player! (redefine) if  leave  then
  \   loop  ;

: pilots  ( -- )
  \ Configure the pilots.
  true redefine-menu  begin  ?terminal 0=  while
    akey s" 012" char-in-string? if  (redefine)  then
  repeat
  wipe-contents  ;

  \ vim: filetype=abersoftforthafera
