.( Tron 0xF: configuration )

\ tron_0xf.file_09.configuration.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ Max length of a player key description in any language:
11 constant /key-desc

  \ Lines of some parts of the redefine menu:
contents-line 2+ constant player-line \ player number
player-line 2+ constant pilot-line  \ human or robot
pilot-line 2+ constant keys-line  \ top keys row

  \ Column of the key description:
0 constant key-desc-col

2 10 thru

( Key descriptions )

: +key-desc-col  ( ca len line -- ca len line col' )
  \ Relative column of a key description,
  \ depending on its length; it's relative to
  \ the absolute column of the key descriptions.
  over /key-desc swap -  ;

: (type-key-desc)  ( ca len line col -- )
  \ Print a key description, on the given line.
  \ col = columns from the left margin of its region.
  key-desc-col + at type  ;

  \ XXX OLD -- not used
  \ : |key-desc|  ( ca len line -- )
  \   \ Print a key description, on the given line,
  \   \ centered on its region.
  \   +key-desc-col 2 / (type-key-desc)  ;

: |key-desc  ( ca len line -- )
  \ Print a key description, on the given line,
  \ at the left of its region.
  0 (type-key-desc)  ;

  \ XXX OLD -- not used
  \ : key-desc|  ( ca len line -- )
  \   \ Print a key description, on the given line,
  \   \ at the right of its region.
  \   over key-desc-col swap - (type-key-desc)  ;
  
( Key descriptions )

here: key-descs
  \  This table contains the cfa of the four texts used
  \  to describe the player keys. When executed, they
  \  return a string in the current language.
  ' up$ cfa , ' down$ cfa , ' left$ cfa , ' right$ cfa ,

: key-desc  ( n -- ca len )
  \ Get the n element from the `key-descs` table.
  cells key-descs + @ execute  ;
  
: key.  ( line col a -- )
  \ Print a key name.
  \ line col = screen coordinates
  \ a = key address in the keys table
  key-name 2swap at type  ;

: player-key.  ( line col a n -- )
  \ Print a player key name.
  \ line col = screen coordinates
  \ a = player keys table
  \ n = key number in the table 
  cells + @ key.  ;

( Keys position)

here: key-columns
  \ Columns of the player keys.
  \ XXX TODO change with the language, because the row headers
  \ are longer is Esperanto.
  10 c, 18 c, 26 c,

: keys-col  ( -- col )
  \ Column of the current player's keys.
  player key-columns + c@  ;

: key#>coords  ( n -- line col )
  \ Convert a key number (0..3) of the current player
  \ to the cursor coordinates of the key in the redefine menu.
  keys-line + keys-col ;

: (key-prompt)  ( a n f -- )
  \ Activate or deactivate the prompt of a redefined key.
  \ a = player keys table
  \ n = key number in the table 
  \ f = flash?
  flash dup key#>coords 2swap player-key.  ;

: +key-prompt  ( a n -- )
  \ Activate the prompt of the key to be redefined.
  \ a = player keys table
  \ n = key number in the table 
  1 (key-prompt) 0 flash  ;

: -key-prompt  ( a n -- )
  \ Deactivate the prompt of the key just redefined.
  \ a = player keys table
  \ n = key number in the table 
  0 (key-prompt)  ;

( Human or robot pilot )

: h/r?  ( c -- f )
  \ Is the given (uppercase) char c
  \ a valid answer for a human/robot option?
  dup [char] H = swap [char] R = or  ;

: h/r  ( -- c )
  \ Wait for a valid key press for a human/robot option
  \ and return its code.
  begin  akey upperc dup h/r? 0=  while  drop  repeat  ;

: human/robot  ( -- cfa )
  \ Wait for a valid key press for a human/robot question
  \ and return the cfa of the correspondent control word.
  h/r [char] H = if  human  else  robot  then  ;

( Redefine the pilot )

  \ Print the pilot of the current player.
: at-pilot  ( -- )  pilot-line keys-col at  ;
: .pilot  ( -- )  at-pilot human|robot$ type  ;

  \ Is the current player a human pilot?
: human?  ( -- f )  player-pilot @ human =  ;

: redefine-pilot  ( -- )
  \ Redefine the pilot of the current player.
  pilot-help$ remark  1 flash .pilot 0 flash
  human/robot player-pilot !
  .pilot  pilot-help$ -remark  ;

( Redefine keys )

  \ XXX FIXME when Break is used, a wrong char is shown

: redefine-keys  ( -- f )
  \ Redefine the keys of the current player.
  \ f = quit redefining?
  false  \ default return flag
  keys/player 0 do
    player-keys i +key-prompt  512 ms pressed  ( a | ff )
    -dup 0= if  -key-prompt unloop 0= exit  then
    dup player-keys i cells + !  i key#>coords rot key. space
  loop  ;

( Redefine keys menu column )

  \ Print the number of the current player.
: at-player  ( -- )  player-line keys-col at  ;
: .player  ( -- )  at-player player .  ;

: redefine-menu-key  ( n -- )
  \ Show a key of the redefine keys menu,
  \ for the 'n' key of the current player.
  dup >r keys-line + keys-col player-keys r> player-key.  ;

: hide-keys  ( -- )
  \ Hide the keys of the current player.
  keys/player 0 do  keys-line i + keys-col at 2 spaces  loop  ;

: show-keys  ( -- )
  \ Show the keys of the current player.
  keys/player 0 do  i redefine-menu-key  loop  ;

: redefine-menu-column  ( n -- )
  \ Show a column of the redefine keys menu,
  \ for player number 'n'.
  dup player!  red ink .player  white ink .pilot
  human? if  show-keys  else  hide-keys  then  ;

: -redefine-menu-column  ( n -- )
  \ Erase a column of the redefine keys menu
  \ for player number 'n'.
  player!  at-player space  at-pilot human|robot$ type-spaces
  hide-keys  ;

( Redefine keys menu )

: redefine-menu-row-headers  ( -- )
  \ Show the row headers of the redefine keys menu.
  red ink
  player$ player-line 0 at type  pilot$ pilot-line 0 at type
  \ Names of the keys at the left.
  keys/player 0 do  i key-desc keys-line i + |key-desc  loop ;

: redefine-menu  ( -- )
  \ Show the redefine keys menu.
  wipe-contents redefine-menu-row-headers
  \ A column for every active player.
  players 0 do  i redefine-menu-column  loop
  \ A column for every inactive player, if any.
  max-players players 2dup <>
    if    do  i -redefine-menu-column  loop
    else  2drop  then  ;

( Redefine )

: do-change?  ( -- f )
  \ Ask "Do you want to change something?" in the current
  \ language and return a flag with the answer (true=yes).
  \ The message is deleted.
  do-change$ bottom-line      2dup 2>r
  white ink |linetype| yes?   2r> |linespaces|  ;

: (redefine)  ( -- f )
  \ Redefine the pilot and keys of the current player.
  \ f = quit?
  \ XXX TODO option to remove the player (human/robot/none)
  \ XXX TODO option to redefine the color
  redefine-pilot human?
  if    show-keys redefine-keys
  else  hide-keys false  then  ;

: redefine  ( -- )
  \ Redefine the pilot and keys of all active players.
  white ink
  players 0 do  i player! (redefine) if  leave  then  loop  ;

: configuration  ( -- )
  \ Redefine the keys.
  redefine-menu
  begin  redefine  do-change? 0=  until  wipe-contents  ;

  \ vim: filetype=abersoftforthafera
