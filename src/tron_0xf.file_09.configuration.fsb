\ tron_0xf.file_09.configuration.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

.( Tron 0xF: configuration )

  \ Max length of a player key description in any language:
11 CONSTANT /KEY-DESC

  \ Line of the top keys row in the redefine menu:
CONTENTS-LINE 3 + CONSTANT KEYS-LINE

  \ Column of the key description:
0 CONSTANT KEY-DESC-COL

2 10 THRU

( Key descriptions )

: +KEY-DESC-COL  ( ca len line -- ca len line col' )
  \ Relative column of a key description,
  \ depending on its length; it's relative to
  \ the absolute column of the key descriptions.
  OVER /KEY-DESC SWAP -  ;

: (TYPE-KEY-DESC)  ( ca len line col -- )
  \ Print a key description, on the given line.
  \ col = columns from the left margin of its region.
  KEY-DESC-COL + AT TYPE  ;

: |KEY-DESC|  ( ca len line -- )
  \ XXX OLD -- not used
  \ Print a key description, on the given line,
  \ centered on its region.
  +KEY-DESC-COL 2 / (TYPE-KEY-DESC)  ;

: |KEY-DESC  ( ca len line -- )
  \ Print a key description, on the given line,
  \ at the left of its region.
  0 (TYPE-KEY-DESC)  ;

: KEY-DESC|  ( ca len line -- )
  \ XXX OLD -- not used
  \ Print a key description, on the given line,
  \ at the right of its region.
  OVER KEY-DESC-COL SWAP - (TYPE-KEY-DESC)  ;
  
( Key descriptions )

HERE: KEY-DESCS
  \  This table contains the cfa of the four texts used
  \  to describe the player keys. When executed, they
  \  return a string in the current language.
  ' UP$ CFA , ' DOWN$ CFA , ' LEFT$ CFA , ' RIGHT$ CFA ,

: KEY-DESC  ( n -- ca len )
  \ Get the n element from the `KEY-DESCS` table.
  CELLS KEY-DESCS + @ EXECUTE  ;
  
: KEY.  ( line col a -- )
  \ Print a key name.
  \ line col = screen coordinates
  \ a = key address in the keys table
  KEY-NAME 2SWAP AT TYPE  ;

: PLAYER-KEY.  ( line col a n -- )
  \ Print a player key name.
  \ line col = screen coordinates
  \ a = player keys table
  \ n = key number in the table 
  CELLS + @ KEY.  ;

( Keys position)

HERE: KEYS-COL-TABLE
  \ Columns of the player keys.
  12 C, 20 C, 28 C,

: KEYS-COL  ( -- col )
  \ Column of the current player's keys.
  PLAYER KEYS-COL-TABLE + C@  ;

: KEY#>COORDS  ( n -- line col )
  \ Convert a key number (0..3) of the current player
  \ to the key's cursor coordinates in the redefine menu.
  KEYS-LINE + KEYS-COL ;

: KEY-PROMPT  ( a n -- )
  \ a = player keys table
  \ n = key number in the table 
  DUP KEY#>COORDS 2SWAP 1 FLASH PLAYER-KEY. 0 FLASH  ;

( Redefine keys )

: (REDEFINE)  ( -- f )
  \ Redefine the keys of the current player.
  \ f = quit redefining?
  FALSE  \ default return flag
  KEYS/PLAYER 0 DO
    PLAYER-KEYS I KEY-PROMPT  1000 MS PRESSED  ( a | ff )
    -DUP 0= IF  UNLOOP 0= EXIT  THEN
    DUP PLAYER-KEYS I CELLS + !  I KEY#>COORDS ROT KEY. SPACE
  LOOP  ;

( Print current player )

  \ XXX OLD
  \ : PLAYER#$  ( -- ca len )
  \   \ The word "Player" in the current language,
  \   \ with the current player number added.
  \   PLAYER$ S"  " S+ PLAYER 1+ S->D <# #S #> S+  ;

: .PLAYER  ( -- )
  \ Print the current player, centered over the keys column.
  \ First the word "Player" in the current language:
  PLAYER$ KEYS-COL OVER 2 / - KEYS-LINE 3 - SWAP AT TYPE
  \ Then the player number, one line above:
  KEYS-LINE 2- KEYS-COL AT PLAYER 1+ .  ;

( Redefine keys menu )

: REDEFINE-MENU-KEY  ( n -- )
  \ Show a key of the redefine keys menu, for the 'n' key of
  \ the current player.
  DUP >R KEYS-LINE + KEYS-COL PLAYER-KEYS R> PLAYER-KEY.  ;

: REDEFINE-MENU-COLUMN  ( n -- )
  \ Show a column of the redefine keys menu, for the player
  \ number 'n'.
  \ Blue color is used for inactive players, if any.
  DUP PLAYER!  
  DUP PLAYERS < 1 + INK .PLAYER  \ active: red; else, blue
  PLAYERS < WHITE * BLUE MAX INK  \ active: white; else, blue
  KEYS/PLAYER 0 DO  I REDEFINE-MENU-KEY  LOOP  ;

: REDEFINE-MENU  ( -- )
  \ Show the redefine keys menu.
  WIPE-CONTENTS  RED INK
  \ Names of the keys at the left.
  KEYS/PLAYER 0 DO  I KEY-DESC KEYS-LINE I + |KEY-DESC  LOOP
  \ A column for every active player.
  PLAYERS 0 DO  I REDEFINE-MENU-COLUMN  LOOP
  \ A column for every inactive player.
  MAX-PLAYERS PLAYERS 2DUP - IF
    DO  I REDEFINE-MENU-COLUMN  LOOP
  ELSE  2DROP  THEN  ;

( Redefine keys )

: REDEFINE  ( -- )
  \ Redefine the keys of all active players.
  WHITE INK
  PLAYERS 0 DO  I PLAYER! (REDEFINE) IF  LEAVE  THEN  LOOP  ;

: REDEFINED?  ( -- f )
  \ Ask for confirmation: Are the redefined keys ok?
  \ XXX TODO
  TRUE  ;

: CONFIGURATION  ( -- )
  \ Redefine the keys.
  \ XXX TODO -- human/machine options
  REDEFINE-MENU
  BEGIN  REDEFINE REDEFINED?  UNTIL  WIPE-CONTENTS  ;

  \ vim: filetype=abersoftforth

