.( Tron 0xF: game -- part 1 )

\ tron_0xf.file_10.game.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

2 11 thru
  
( Paint )

: paint  ( -- )
  \ Paint the current player.
  player-color @ ink player-coords 2@ plot  ;

( Crash check and effect )

: borders  ( -- )
  \ Change the border using all colors from white to black.
  [ black 1- ] literal white do  i border  -1 +loop  ;

: crash-effect  ( -- )
  \ XXX TODO
  100 50 do  11 i ?bleep borders  loop  ;

: crash  ( -- )
  \ Do a visual effect; then wait until a key is pressed.
  crash-effect  begin  inkey?  until  drop  ;

: crash?  ( -- f )
  \ Is the next position of the current player occupied?
  player-xinc @ player-xc @ +
  \ dup 0 0 at .  \  XXX INFORMER
  player-yinc @ player-yc @ +
  \ dup 0 15 at .  \  XXX INFORMER
  point  ;

( Scores )

999 constant max-score

: score!   ( n a -- )
  \ Update the score stored in 'a' with 'n';
  \ if the result is greater than the maximum score,
  \ reset the score to zero.
  dup @ rot + dup max-score > if  0=  then  swap !  ;

: score+  ( -- )
  \ Increase the score of the current player.
  1 player-score score! .score  ;

: duel-end  ( -- )
  2000 ms -status colors0 press-any-key -status  ;

: winner  ( -- )
  \ Search for the winner and increase the score,
  \ showing the new score with flashing digits.
  max-players 0 do
    i player! alive? if  1 flash score+ 0 flash leave  then
  loop  ( f ) duel-end  ;

: -scores  ( -- )
  \ Reset all scores.
  max-players 0 do  i player!  player-score off  loop  ;

( Collisions )

  \ XXX OLD
  \ : uncolor  ( -- )
  \   \ Change the color of the current player
  \   \ to the color of the frame.
  \   player-color @
  \   [ attributes /attributes bounds swap ] literal literal
  \   do  dup i c@ = if  frame-attribute i c!  then  loop  drop  ;

: killed  ( -- )
  \ Kill the current player.
  dead player-control !  \ deactivate it
  \ uncolor  \ XXX OLD
  players 1- to players  ;  \ one less

( Rudder increments)

 \ Coordinate increments.
 \ Double constants are used to update the coordinate
 \ increments faster.

 \ X  Y 
   0  1 2constant up-incs
   0 -1 2constant down-incs
  -1  0 2constant left-incs
   1  0 2constant right-incs

( Score columns execution table )

  \ Score columns
:noname ( -- col2 col1 col0 )  28 14 01 ;  \ three players
:noname ( -- col1 col0 )  28 01 ;  \ two players
:noname ( -- col0 )  14  ; \ one player

  \ Execution table for `get-score-columns`.
here: score-columns  ( cfa2 cfa1 cfa0 )  , , ,
 
: get-score-columns ( -- col2 col1 col0 | col1 col0 | col0 )
  \ Return one, two or three score columns.
  players 1- score-columns swap >execute  ;

: set-score-columns  ( -- )
  \ Set the players' score columns.
  get-score-columns
  max-players 0 do  i player!
    player-control @ if  player-score-col !  then
  loop  ;

( Start positions execution table )

:noname
  \ ( -- x2 y2 x-inc2 y-inc2 ... x0 y0 x-inc0 y-inc0 )
  \ Start screen position and increments, for three players.
  215 127 left-incs  126 40 up-incs  40 127 right-incs ;

:noname
  \ ( -- x1 y1 x-inc1 y-inc1 x0 y0 x-inc0 y-inc0 )
  \ Start screen position and increments, for two players.
  215 88 left-incs  40 88 right-incs  ;

:noname
  \ ( -- x0 y0 x-inc0 y-inc0 )
  \ Start screen position and increments, for one player.
  127 88 up-incs  ;

here: start-positions
  \ Execution table for `get-start-positions`.
  \ ( cfa2 cfa1 cfa0 )
  , , ,

( Start positions )

: get-start-positions ( -- ... col x y x-inc y-inc )
  \ Return one, two or three sets of player positions
  \ (score column, start screen position and increments).
  \ Note: only one set is shown in the stack notation above.
  players 1- start-positions swap >execute  ;

: set-start-positions  ( -- )
  \ Set the players' start positions.
  get-start-positions
  max-players 0 do  i player!
    player-control @ if
      player-start-incs 2!  player-start-coords 2!
    then
  loop  ;

( Duel init )

: ready  ( -- )
  \ Show all active players at their start positions.
  max-players 0 do
    i player!  player-control @ if
      player-start-coords 2@ player-coords 2!
      player-start-incs 2@ player-incs 2!
      paint
    then 
  loop  ;

  \ Init a duel.
  \ XXX TODO message
: duel-init  ( -- )
  update-players set-start-positions 
  clear-arena status ready akey drop  ;

( Game init )

: game-init  ( -- )
  \ Init the game.
  set-motor-sound  sound? @ sound  -scores
  update-players set-score-columns
  cls0 arena save-arena  ;

  \ vim: filetype=abersoftforthafera
