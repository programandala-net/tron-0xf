.( Tron 0xF: game -- part 1 )

\ tron_0xf.file_10.game.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015,2016,2020 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ -----------------------------------------------------------

  \ The author would be grateful for any constructive
  \ suggestions and bug-reports, via
  \ <http://programandala.net>.

  \ -----------------------------------------------------------

2 8 thru

( Crash check and effect )

: borders ( -- )
  [ black 1- ] literal white do i border -1 +loop ;
  \ Change the border using all colors from white to black.

: crash-effect ( -- ) 100 50 do  11 i ?bleep borders  loop ;
  \ XXX TODO

: crash ( -- ) crash-effect begin inkey? until drop ;
  \ Do a visual effect; then wait until a key is pressed.

: crash? ( -- f ) player-xinc @ player-xc @ +
                  player-yinc @ player-yc @ + point ;
  \ Is the next position of the current player occupied?

: killed ( -- ) dead player-control !  players 1- to players ;
  \ Kill the current player.

( Scores )

999 constant max-score

: +score  ( -- )
  \ player-score @ max-score = if quit then
  \ XXX TMP -- the line above is used for testing during
  \ the development, running the game with 2 or 3 robots (no
  \ human pilot), until one of them reaches the highest score.
  \
  player-score @ 1+ dup max-score > 0= * player-score ! ;
  \ Increase the score of the current player.
  \ if the result is greater than the maximum score,
  \ set the score to zero.

: duel-end ( -- )
  2000 pilots 1 > * ms  robots-only? 0=
  if -status colors0 press-any-key then -status ;
  \ XXX TODO simpler

: winner ( -- )
  max-players 0 do
    i player! alive?
    if +score 1 flash .score 0 flash leave then
  loop duel-end ;
  \ Search for the winner and increase the score,
  \ showing the new score with flashing digits.

: -scores ( -- )
  max-players 0 do i player! player-score off loop ;
  \ Reset all scores.

( Score columns execution table )

:noname ( -- col2 col1 col0 ) 28 14 01 ; \ three players
:noname ( -- col1 col0 ) 28 01 ; \ two players
:noname ( -- col0 ) 14 ; \ one player
  \ Score columns

here: score-columns ( cfa2 cfa1 cfa0 ) , , ,
  \ Execution table for `get-score-columns`.

: get-score-columns ( -- col2 col1 col0 | col1 col0 | col0 )
  players 1- score-columns swap >execute ;
  \ Return one, two or three score columns.

: set-score-columns ( -- )
  get-score-columns  max-players 0 do
    i player! player-control @ if player-score-col ! then
  loop ;
  \ Set the players' score columns.

( Start positions execution table )

 \ X  Y
   0  1 2constant up-incs
   0 -1 2constant down-incs
  -1  0 2constant left-incs
   1  0 2constant right-incs
  \ Coordinate increments.
  \ Double constants are used for speed.

: -4..4 ( -- n ) -4 [ 5 -4 - ] literal random + ;
  \ Return a random number _n_ from -4 (min) to 4 (max).

: near ( x y -- x' y' ) -4..4 + swap -4..4 + swap ;
  \ Modify screen position _x y_ in an random range -4..4,
  \ resulting _x' y'_.

:noname ( -- x2 y2 x-inc2 y-inc2 ... x0 y0 x-inc0 y-inc0 )
  215 127 near left-incs  128 40 near up-incs
   40 127 near right-incs ;
  \ Start screen position and increments, for three players.

:noname ( -- x1 y1 x-inc1 y-inc1 x0 y0 x-inc0 y-inc0 )
  215 88 near left-incs  40 88 near right-incs ;
  \ Start screen position and increments, for two players.

:noname ( -- x0 y0 x-inc0 y-inc0 ) 127 88 near up-incs ;
  \ Start screen position and increments, for one player.

here: start-positions ( cfa2 cfa1 cfa0 ) , , ,
  \ Execution table for `get-start-positions`.

( Start positions and paint )

: get-start-positions ( -- ... col x y x-inc y-inc )
  players 1- start-positions swap >execute ;
  \ Return one, two or three sets of player positions
  \ (score column, start screen position and increments).
  \ Note: only one set is shown in the stack notation above.

: set-start-positions ( -- )
  get-start-positions  max-players 0 do  i player!
    player-control @ if player-start-incs   2!
                        player-start-coords 2! then loop ;
  \ Set the players' start positions.

: paint ( -- ) player-color @ ink player-coords 2@ plot ;
  \ Paint the current player.

( Duel init; game init )

: ready ( -- )
  max-players 0 do
    \ -1 max-players 1- do \ XXX TMP
    i player!  player-control @ if
      player-start-coords 2@ player-coords 2!
      player-start-incs   2@ player-incs   2!
      paint then loop ;
  \ Show all active players at their start positions.
  \
  \ XXX TODO -- it seems the robot scores are more even when
  \ the loop is countdown

: duel-init ( -- )
  update-players set-start-positions
  clear-arena status ready
  robots-only? if 1000 ms else akey drop then ;
  \ Init a duel.
  \ XXX TODO message

: game-init ( -- ) set-motor-sound  sound? @ sound  -scores
                   update-players set-score-columns
                   cls0 arena save-arena ;
  \ Init the game.

  \ vim: filetype=abersoftforthafera
