\ tron_0xf.file_02.graphics.fsb

\ This file is part of
\ Tron 0xF
\ A game written in ZX Spectrum's Abersoft Forth

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ Licencia/Permesilo/License: GPL 3

\ http://programandala.net/en.program.tron_0xf.html

  \ -----------------------------------------------------------
  \ fsb directives

  \ The following '#vim' directives, processed by fsb,
  \ translate the UTF-8 chars in this source file to ZX
  \ Spectrum UDG.

  \ #vim %substitute@á@\=nr2char(145)@g
  \ #vim %substitute@é@\=nr2char(147)@g
  \ #vim %substitute@í@\=nr2char(149)@g
  \ #vim %substitute@ó@\=nr2char(151)@g
  \ #vim %substitute@ú@\=nr2char(153)@g
  \ #vim %substitute@ñ@\=nr2char(157)@g
  \ #vim %substitute@¿@\=nr2char(158)@g
 
  \ #vim %substitute@Ĉ@\=nr2char(144)@g
  \ #vim %substitute@ĝ@\=nr2char(147)@g
  \ #vim %substitute@ŭ@\=nr2char(155)@g

.( Tron 0xF: graphics )

2 10 THRU

( Font)

  \ The game fonts are loaded from tape at the end of the
  \ compilation. Words are defined to switch them on and off:

768 CONSTANT /FONT  \ size in bytes
/FONT BUFFER: FONT

  \ Set the game font:
: +FONT  ( -- )  [ FONT 256 - ] LITERAL SYS-CHARS ! ;

  \ Set the ROM font:
: -FONT  ( -- )  15360 SYS-CHARS ! ;
  
  \ Double height digits are used to print the scores.  They
  \ are hold in a bank of 20 UDG. The first 10 UDG are the top
  \ halves of the digits, the second 10 UDG are the bottom
  \ halves.  Every set is switched instead of the game font
  \ when needed.

10 2 * 8 * CONSTANT /DIGITS-UDG  \ size in bytes
/DIGITS-UDG BUFFER: DIGITS-UDG

: DIGITS>CHARS  ( a1 -- a2 )
  \ Convert the address of UDG digits to the address of a fake
  \ font that contains those digits.
  [CHAR] 0 BL - 8 * -  256 -  ;

: +HI-DIGITS  ( -- )
  \ Set the high part of the double height digits
  \ as the current font.
  [ DIGITS-UDG DIGITS>CHARS ] LITERAL
  SYS-CHARS ! ;

: +LO-DIGITS  ( -- )
  \ Set the low part of the double height digits
  \ as the current font.
  [ DIGITS-UDG /DIGITS-UDG 2 / +  DIGITS>CHARS ] LITERAL
  SYS-CHARS ! ;

( UDG fonts)

  \ User Defined Graphics are used for the Spanish and
  \ Esperanto characters. Two banks are used. They are loaded
  \ from tape at the end of the compilation. The correspondent
  \ UDG bank is switched when the user changes the language in
  \ the game menu.

12 8 * CONSTANT /EO-UDG  \ size in bytes
/EO-UDG BUFFER: EO-UDG

18 8 * CONSTANT /ES-UDG  \ size in bytes
/ES-UDG BUFFER: ES-UDG

HERE: UDG-BANK
  \ Addresses of the UDG banks used for every language.
  UDG , EO-UDG , ES-UDG ,

: +UDG  ( n -- )
  \ Set the UDG bank required by the given language number.
  CELLS UDG-BANK + @ SYS-UDG !  ;

: -UDG  ( -- )
  \ Set the default UDG bank.
  \ It contains the frame graphs.
  UDG SYS-UDG !  ;
  
( Screen -- generic)

: CLS0  ( -- )
  \ Clear the screen with the default colors.
  BLACK PAPER  BLACK BORDER  WHITE INK  CLS  ;

: -ATTRIBUTES  ( -- )
  \ Set the attributes to zero.
  \ This is used before drawing the arena,
  \ in order to make `SAVE-ARENA` and
  \ `RESTORE-ARENA` work as expected.
  ATTRIBUTES /ATTRIBUTES ERASE  ;

  \ Size of the screen:
32 CONSTANT COLS
24 CONSTANT LINES

  \ Size of the game arena (inside its frame):
COLS 2 - CONSTANT ARENA-COLS
LINES 4 - CONSTANT ARENA-LINES

  \ Attributes addresses of the arena frame:
ATTRIBUTES CONSTANT TOP-FRAME-ATTRIBUTES
ATTRIBUTES COLS LINES 3 - * + CONSTANT BOTTOM-FRAME-ATTRIBUTES

( Center justified texts)

  \ XXX OLD
  \ : HOME  ( -- )  0 DUP AT  ;

: CENTERED  ( len -- column )
  \ Convert a string length to the column required
  \ to print the string centered.
  COLS SWAP - 2 /  ;

: |AT|  ( line len -- )
  \ Put the cursor on the given line, on the column
  \ required to center a text of the given length.
  CENTERED AT  ;

: |LINESPACES|  ( len line -- )
  \ Type spaces centered on a given line.
  OVER |AT| SPACES  ;

: |LINETYPE|  ( ca len line -- )
  \ Type a string centered on a given line.
  OVER |AT| TYPE  ;

: |TYPE|  ( ca len -- )

  \ Type a string centered on the current line.
 
  \ Note: the line is supposed to be empty, and it will be
  \ erased at the left of the text.
  
  \ XXX TODO Get the current line and call `<LINETYPE>`instead
  \ of printing spaces.

  DUP CENTERED SPACES TYPE  ;

( Title and status bar)

: TITLE  ( -- )
  RED INK S" Tron 0xF" |TYPE| CR CR WHITE INK  ;

  \ XXX OLD -- version with normal characters
  \ : SCORE. ( a color line column -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits.
  \ AT INK @ S->D <# # # # #> TYPE  ;

22 CONSTANT STATUS-LINE

: (.SCORE) ( a1 column a2 -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits and double height characters.
  \ a1 = score
  \ a2 = color
  @ INK >R
  STATUS-LINE R AT  @ S->D <# # # # #> 2DUP +HI-DIGITS TYPE
  STATUS-LINE 1+ R> AT  +LO-DIGITS TYPE +FONT  ;

HERE: SCORE-COLUMN-TABLE
  \ Columns of the scores on the status bar.
  1 C, 28 C, 14 C,

: SCORE-COLUMN  ( -- column )
  \ Column of the current player's score.
  PLAYER SCORE-COLUMN-TABLE + C@  ;

: .SCORE  ( -- )
  \ Print the the current player's score.
  PLAYER-SCORE SCORE-COLUMN PLAYER-COLOR (.SCORE)  ;

: STATUS  ( -- )
  \ Show the status bar.
  \ XXX TODO improve (now it shows only the scores)
  PLAYERS 0 DO  I PLAYER! .SCORE  LOOP  ;

( COLOR-FRAME )

RED BLACK PAPERY + CONSTANT FRAME-COLOR

: FRAME-BAR  ( a -- )  COLS FRAME-COLOR FILL  ;

: COLOR-FRAME  ( -- )

  \ Draw the arena visible border.

  TOP-FRAME-ATTRIBUTES FRAME-BAR  \ top part
  BOTTOM-FRAME-ATTRIBUTES FRAME-BAR  \ bottom part
  \ Left and right parts:
  BOTTOM-FRAME-ATTRIBUTES TOP-FRAME-ATTRIBUTES DO
    FRAME-COLOR DUP I C!  I [ COLS 1 - ] LITERAL + C!
  COLS +LOOP  ;

( DRAW-FRAME FRAME )

: DRAW-FRAME  ( -- )
  \ Draw the arena invisible limit, needed to detect crashes.
  \ XXX OLD
  \ 7 7 PLOT 0 161 RDRAW 241 0 RDRAW 0 -161 RDRAW -241 0 RDRAW  ;
  \ Corners.
  0  0 AT 145 EMIT   0 31 AT 146 EMIT
  21 0 AT 144 EMIT  21 31 AT 147 EMIT
  \ Horizontal sides.
  31 1 DO  0 I AT 149 EMIT  21 I AT 151 EMIT  LOOP
  \ Vertical sides.
  21 1 DO  I 0 AT 148 EMIT  I 31 AT 150 EMIT  LOOP  ;

: FRAME  ( -- )
  \ Draw the arena frame.
  -UDG BLACK INK DRAW-FRAME COLOR-FRAME  LANG @ +UDG  ;

( Arena -- save, restore, clear, draw)

: SAVE-ARENA  ( -- )
  \ Save the attributes of the central zone of the arena
  \ (between the horizontal borders) to the first block of
  \ the Forth RAM-disc.
  [ TOP-FRAME-ATTRIBUTES COLS +
    BOTTOM-FRAME-ATTRIBUTES OVER - SWAP ]
    LITERAL LO LITERAL CMOVE  ;

: RESTORE-ARENA  ( -- )
  \ Restore the attributes of the central zone of the arena
  \ (between the horizontal borders) from the first block of
  \ the Forth RAM-disc.
  LO [ TOP-FRAME-ATTRIBUTES COLS +
       BOTTOM-FRAME-ATTRIBUTES OVER - SWAP ]
       LITERAL LITERAL CMOVE  ;

: CLEAR-ARENA  ( -- )

  \ Clear only the game arena.

  \ First, hide the arena instantaneously by restoring the
  \ saved attributes:
  RESTORE-ARENA

  \ Second, a slower process, actually clear the players'
  \ trails by overwritting the arena with spaces:
  [ ARENA-LINES 1+ ] LITERAL 1 DO
    I 1 AT [ COLS 2 - ] LITERAL  SPACES
  LOOP  ;

: ARENA  ( -- )
  \ Draw the arena.
  -ATTRIBUTES FRAME SAVE-ARENA STATUS  ;

  \ vim: filetype=abersoftforth:fileencoding=utf-8
