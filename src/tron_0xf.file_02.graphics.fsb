.( Tron 0xF: graphics )

\ tron_0xf.file_02.graphics.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ Address and size of the screen
16384 constant sys-screen  6912 constant /sys-screen
                           6144 constant /sys-screen-bitmap
  \ Address and size of the screen attributes
22528 constant attributes  768 constant /attributes

: save-display  ( -- )
  \ Save a copy of the whole display image
  \ to screen 2 of the Forth RAM disk.
  sys-screen [ 2 disc-scr ] literal /sys-screen cmove  ;

: restore-display  ( -- )
  \ Save the copy of the whole display image
  \ from screen 2 of the Forth RAM disk.
  [ 2 disc-scr ] literal sys-screen /sys-screen cmove  ;

2 10 thru

( Font)

  \ The game fonts are loaded from tape at the end of the
  \ compilation. Words are defined to switch them on and off:

  768 constant /font  \ size in bytes
  \ Screen 9 of the Forth RAM disk is used to store the font.
9 disc-scr constant font

  \ Set the game font:
: +font  ( -- )  [ font 256 - ] literal sys-chars ! ;

  \ Set the ROM font:
: -font  ( -- )  15360 sys-chars ! ;
  
  \ Double height digits are used to print the scores.  They
  \ are hold in a bank of 20 UDG. The first 10 UDGs are the top
  \ halves of the digits, the second 10 UDGs are the bottom
  \ halves.  Every set is switched instead of the game font
  \ when needed.

10 2 * 8 * constant /digits-udg  \ size in bytes
  \ /digits-udg buffer: digits-udg  \ XXX OLD
  \ The unused space above `hi` is used:
hi 1+ constant digits-udg

: digits>chars  ( a1 -- a2 )
  \ Convert the address of UDG digits to the address of a fake
  \ font that contains those digits.
  [char] 0 bl - 8 * -  256 -  ;

: +hi-digits  ( -- )
  \ Set the high part of the double height digits
  \ as the current font.
  [ digits-udg digits>chars ] literal
  sys-chars ! ;

: +lo-digits  ( -- )
  \ Set the low part of the double height digits
  \ as the current font.
  [ digits-udg /digits-udg 2 / +  digits>chars ] literal
  sys-chars ! ;

( UDG fonts)

  \ The user defined graphics are used for the Spanish and
  \ Esperanto characters. Two banks are used. They are loaded
  \ from tape at the end of the compilation. The correspondent
  \ UDG bank is switched when the user changes the language in
  \ the game menu.

sys-udg @ constant udg0  \ address of the default UDG bank

  \ UDG bank for the Esperanto letters.
12 8 * constant /eo-udg  \ size in bytes
  \ /eo-udg buffer: eo-udg  \ XXX OLD
  \ The unused space above `hi` is used:
digits-udg /digits-udg + constant eo-udg

  \ UDG bank for the Spanish letters and characters.
18 8 * constant /es-udg  \ size in bytes
  \ /es-udg buffer: es-udg
  \ The unused space above `hi` is used:
eo-udg /eo-udg + constant es-udg

here: udg-bank
  \ Addresses of the UDG banks used for every language.
  udg0 , eo-udg , es-udg ,

: +udg  ( n -- )
  \ Set the UDG bank required by the given language number.
  cells udg-bank + @ sys-udg !  ;

: -udg  ( -- )
  \ Set the default UDG bank.
  \ It contains the frame graphs.
  0 +udg  ;
  
( Screen -- generic)

: tron-colors  ( -- )
  \ Set the default colors.
  black paper  white ink  black border
  0 flash  0 bright  0 inverse  0 gover  ;

  \ Patch `colors0`.
' tron-colors cfa ' colors0 !

: blackout  ( -- )
  \ Erase the whole display,
  \ both the bitmap and the attributes
  \ (what means black ink and black paper).
  sys-screen /sys-screen erase  ;

  \ Size of the screen:
32 constant cols
24 constant lines

lines 1- constant bottom-line 

  \ Size of the game arena (inside its frame):
cols 2 - constant arena-cols
lines 4 - constant arena-lines

  \ Attributes addresses of the arena frame:
attributes constant top-frame-attributes
attributes cols lines 3 - * + constant bottom-frame-attributes

( Center justified texts and title )

: centered  ( len -- column )
  \ Convert a string length to the column required
  \ to print the string centered.
  cols swap - 2 /  ;

: |at|  ( line len -- )
  \ Put the cursor on the given line, at the column
  \ required to center a text of the given length.
  centered at  ;

  \ Type spaces centered on a given line.
: |linespaces|  ( len line -- )  over |at| spaces  ;

  \ Type a string centered on a given line.
: |linetype|  ( ca len line -- )  over |at| type  ;

  \ Type a string centered on the last line.
: remark  ( ca len -- )  bottom-line |linetype|  ;

  \ Erase a string centered on the last line.
:  -remark  ( ca len -- )  nip bottom-line |linespaces|  ;

  \ Move the cursor position to the given column
  \ of the current line.
: at-col  ( col -- )  AT@ drop swap at  ;

  \ XXX OLD
  \ : |TYPE|  ( ca len -- )
  \   \ Type a string centered on the current line.
  \   dup centered at-col type  ;

  \ The last two screens (10..11) of the Forth RAM disk
  \ are used to store the graphic of the title, that 
  \ ocuppies exactly 2 KiB, one third of the bitmap:
10 disc-scr constant title-address

: title  ( -- )
  \ Show the main title, copying its graphic to the screen
  \ and setting its color attributes.
  \ The graphic ocuppies the first third of the screen
  \ (2048 bytes of bitmap and 256 bytes of color attributes).
  title-address sys-screen 2048 cmove
  22528 256 red fill  ;

: type-spaces  ( ca len -- )  nip spaces  ;

( Contents zone )

  \ The zone above the title is called the contents zone.  It
  \ is used for menus, configuration and information
  \ (instructions, about, etc.).

8 constant contents-line  \ first usable line

  \ Set ink color and print position ready for new contents.
: at-contents  ( -- )  contents-line 0 at  black ink  ;

  \ Start a new contents page.
: page  ( -- )  blackout title  at-contents  ;

  \ Calculate the screen attributes zone of the contents zone.
contents-line cols *  \ bytes to skip
attributes over +  /attributes rot -  ( a len )
  2constant contents-attributes

  \ Calculate the screen bitmap zone of the contents zone.
contents-line cols * 8 *  \ bytes to skip (8 scans/char)
sys-screen over +  /sys-screen-bitmap rot - ( a len )
  2constant contents-bitmap

: wipe-contents  ( -- )
  \ Erase the screen attributes of the contents zone (what
  \ equals black ink and black paper), position the cursor at
  \ the start of the zone and set black ink for the text to be
  \ printed.  This is used to clear the menu and other pages
  \ without deleting the title header, and hidding the new
  \ contents until they are fully printed.
  contents-attributes erase  contents-bitmap erase
  at-contents  ;

: reveal-contents  ( -- )
  \ Set the screen attributes of the contents zone to the
  \ normal values (white ink).  This is used to show the menu
  \ and other pages instantaneously after updating them.
  contents-attributes white fill  white ink  ;

( Status bar)

22 constant status-line

: (.score) ( a1 a2 a3 -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits and double height characters.
  \ a1 = address of the score
  \ a2 = address of the score column
  \ a3 = address of the color
  @ ink @ >r
  status-line r at  @ s->d <# # # # #> 2dup +hi-digits type
  status-line 1+ r> at  +lo-digits type +font  ;

: .score  ( -- )
  \ Print the the current player's score.
  player-score player-score-col player-color (.score)  ;

: status  ( -- )
  \ Show the status bar.
  \ XXX TODO improve (now it shows only the scores)
  last-one? ?exit
  max-players 0 do
    i player!  someone? if  .score  then
  loop  ;

: -status  ( -- )
  \ Erase the status bar.
  status-line 0 at  [ cols 2* ] literal spaces  ;

( color-frame )

: papery  ( color -- paper-attribute )  8 *  ;

red constant frame-color
frame-color black papery + constant frame-attribute

: frame-bar  ( a -- )  cols frame-attribute fill  ;

: color-frame  ( -- )

  \ Color the arena frame.

  top-frame-attributes frame-bar  \ top part
  bottom-frame-attributes frame-bar  \ bottom part
  \ Left and right parts:
  bottom-frame-attributes top-frame-attributes do
    frame-attribute dup i c!  i [ cols 1 - ] literal + c!
  cols +loop  ;

( draw-frame frame )

: draw-frame  ( -- )

  \ Draw the arena frame.

  \ Corners.
  0  0 at 145 emit   0 31 at 146 emit
  21 0 at 144 emit  21 31 at 147 emit

  \ Horizontal sides.
  31 1 do  0 i at 149 emit  21 i at 151 emit  loop

  \ Vertical sides.
  21 1 do  i 0 at 148 emit  i 31 at 150 emit  loop  ;

: frame  ( -- )
  \ Draw the arena frame.
  -udg black ink draw-frame color-frame  lang +udg  ;

( Arena -- save, restore, clear, draw)

: save-arena  ( -- )
  \ Save the attributes of the central zone of the arena
  \ (between the horizontal borders) to the first screen of
  \ the Forth RAM-disc.
  [ top-frame-attributes cols +
    bottom-frame-attributes over - swap ]
    literal lo literal cmove  ;

: restore-arena  ( -- )
  \ Restore the attributes of the central zone of the arena
  \ (between the horizontal borders) from the first screen of
  \ the Forth RAM-disc.
  lo [ top-frame-attributes cols +
       bottom-frame-attributes over - swap ]
       literal literal cmove  ;

: clear-arena  ( -- )

  \ Clear only the game arena.

  \ First, hide the arena instantaneously by restoring the
  \ saved attributes:
  restore-arena

  \ Second, a slower process, actually clear the players'
  \ trails by overwritting the arena with spaces:
  [ arena-lines 1+ ] literal 1 do
    i 1 at [ cols 2 - ] literal  spaces
  loop  ;

: arena  ( -- )
  \ Draw the arena.
  blackout frame save-arena status  ;

  \ vim: filetype=abersoftforthafera
