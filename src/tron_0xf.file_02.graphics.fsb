\ tron_0xf.file_02.graphics.fsb

\ This file is part of
\ Tron 0xF
\ A game written in ZX Spectrum's Abersoft Forth

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ Licencia/Permesilo/License: GPL 3

\ http://programandala.net/en.program.tron_0xf.html

  \ -----------------------------------------------------------
  \ fsb directives

  \ The following '#vim' directives, processed by fsb,
  \ translate the UTF-8 chars in this source file to ZX
  \ Spectrum UDG.

  \ #vim %substitute@á@\=nr2char(145)@g
  \ #vim %substitute@é@\=nr2char(147)@g
  \ #vim %substitute@í@\=nr2char(149)@g
  \ #vim %substitute@ó@\=nr2char(151)@g
  \ #vim %substitute@ú@\=nr2char(153)@g
  \ #vim %substitute@ñ@\=nr2char(157)@g
  \ #vim %substitute@¿@\=nr2char(158)@g
 
  \ #vim %substitute@Ĉ@\=nr2char(144)@g
  \ #vim %substitute@ĝ@\=nr2char(147)@g
  \ #vim %substitute@ŭ@\=nr2char(155)@g

.( Tron 0xF: graphics )

2 9 THRU

( Plot and draw)

: RDRAW  ( inc-x inc-y -- )
  \ Draw a relative line (from the current plot position).
  SYS-Y-COORD C@ + SWAP SYS-X-COORD C@ + SWAP DRAW  ;

  \ XXX OLD

  \ : XY>ATTRA  ( x y -- a )
  \   \ Convert a pixel coordinate to its attribute address.
  \   175 SWAP - 8 / 32 *  SWAP 8 /  + ATTRIBUTES +  ;

  \ : COLORPLOT  ( color x y -- )
  \   \ Plot a pixel with the given color.
  \   \ There's a bug in Abersoft Forth: `PLOT` does not work
  \   \ when `INK` is used before. That's why this word
  \   \ is needed.
  \   2DUP PLOT XY>ATTRA C!  ;

( Font)

  \ The game fonts are loaded from tape at the end of the
  \ compilation. Words are defined to switch them on and off:

768 CONSTANT /FONT  \ size in bytes
/FONT BUFFER: FONT

  \ Set the game font:
: +FONT  ( -- )  [ FONT 256 - ] LITERAL SYS-CHARS ! ;

  \ Set the ROM font:
: -FONT  ( -- )  15360 SYS-CHARS ! ;
  
  \ Double height digits are used to print the scores.  They
  \ are hold in a bank of 20 UDG. The first 10 UDG are the top
  \ halves of the digits, the second 10 UDG are the bottom
  \ halves.  Every set is switched instead of the game font
  \ when needed.

10 2 * 8 * CONSTANT /DIGITS-UDG  \ size in bytes
/DIGITS-UDG BUFFER: DIGITS-UDG

: DIGITS>CHARS  ( a1 -- a2 )
  \ Convert the address of UDG digits to the address of a fake
  \ font that contains those digits.
  [CHAR] 0 BL - 8 * -  256 -  ;

: +HI-DIGITS  ( -- )
  \ Set the high part of the double height digits
  \ as the current font.
  [ DIGITS-UDG DIGITS>CHARS ] LITERAL
  SYS-CHARS ! ;

: +LO-DIGITS  ( -- )
  \ Set the low part of the double height digits
  \ as the current font.
  [ DIGITS-UDG /DIGITS-UDG 2 / +  DIGITS>CHARS ] LITERAL
  SYS-CHARS ! ;

( UDG)

  \ User Defined Graphics are used for the Spanish and
  \ Esperanto characters. Two bank are used. They are loaded
  \ from tape at the end of the compilation. The correspondent
  \ UDG bank is switched when the user changes the language in
  \ the game menu.

12 8 * CONSTANT /EO-UDG  \ size in bytes
/EO-UDG BUFFER: EO-UDG

18 8 * CONSTANT /ES-UDG  \ size in bytes
/ES-UDG BUFFER: ES-UDG


HERE: UDG-BANK
  \ Addresses of the UDG banks used for every language.
  UDG , EO-UDG , ES-UDG ,

( Screen -- generic)

: CLS0  ( -- )
  \ Clear the screen with the default colors.
  BLACK PAPER  BLACK BORDER  WHITE INK  CLS  ;

: -ATTRIBUTES  ( -- )
  \ Set the attributes to zero.
  \ This is used before drawing the arena,
  \ in order to make `SAVE-ARENA` and
  \ `RESTORE-ARENA` work as expected.
  ATTRIBUTES /ATTRIBUTES ERASE  ;

  \ Size of the screen:
32 CONSTANT COLS
24 CONSTANT LINES

  \ Size of the game arena (inside its frame):
COLS 2 - CONSTANT ARENA-COLS
LINES 4 - CONSTANT ARENA-LINES

  \ Attributes addresses of the arena frame:
ATTRIBUTES CONSTANT TOP-FRAME-ATTRIBUTES
ATTRIBUTES COLS LINES 3 - * + CONSTANT BOTTOM-FRAME-ATTRIBUTES

( Center justified texts)

  \ XXX OLD
  \ : HOME  ( -- )  0 DUP AT  ;

: CENTERED  ( len -- column )
  \ Convert a string length to the column required
  \ to print the string centered.
  COLS SWAP - 2 /  ;

: <AT>  ( line len -- )
  \ Put the cursor on the given line, on the column
  \ required to center a text of the given length.
  CENTERED AT  ;

: <LINESPACES>  ( len line -- )
  \ Type spaces centered on a given line.
  OVER <AT> SPACES  ;

: <LINETYPE>  ( ca len line -- )
  \ Type a string centered on a given line.
  OVER <AT> TYPE  ;

: <TYPE>  ( ca len -- )

  \ Type a string centered on the current line.
 
  \ Note: the line is supposed to be empty, and it will be
  \ erased at the left of the text.
  
  \ XXX TODO Get the current line and call `<LINETYPE>`instead
  \ of printing spaces.

  DUP CENTERED SPACES TYPE  ;

( Title and status bar)

: TITLE  ( -- )
  RED INK S" Tron 0xF" <TYPE> CR CR WHITE INK  ;

  \ XXX OLD -- version with normal characters
  \ : SCORE. ( a color line column -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits.
  \ AT INK @ S->D <# # # # #> TYPE  ;

22 CONSTANT STATUS-LINE

: SCORE. ( a1 column a2 -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits and double height characters.
  \ a1 = score
  \ a2 = color
  @ INK >R
  STATUS-LINE R AT  @ S->D <# # # # #> 2DUP +HI-DIGITS TYPE
  STATUS-LINE 1+ R> AT  +LO-DIGITS TYPE +FONT  ;

: .SCORE1  ( -- )  SCORE1 00 COLOR1 SCORE.  ;
: .SCORE2  ( -- )  SCORE2 29 COLOR2 SCORE.  ;
: .SCORE3  ( -- )  SCORE3 14 COLOR3 SCORE.  ;

: STATUS  ( -- )

  \ Show the status bar at the current cursor position.

  .SCORE1
  PLAYERS 2 < ?EXIT .SCORE2
  PLAYERS 3 < ?EXIT .SCORE3  ;

( Arena border, limit, frame)

RED RED PAPERY + CONSTANT FRAME-COLOR

: FRAME-BAR  ( a -- )  COLS FRAME-COLOR FILL  ;

: ARENA-BORDER  ( -- )

  \ Draw the arena visible border.

  TOP-FRAME-ATTRIBUTES FRAME-BAR  \ top part
  BOTTOM-FRAME-ATTRIBUTES FRAME-BAR  \ bottom part
  \ Left and right parts:
  BOTTOM-FRAME-ATTRIBUTES TOP-FRAME-ATTRIBUTES DO
    FRAME-COLOR DUP I C!  I [ COLS 1 - ] LITERAL + C!
  COLS +LOOP  ;

: ARENA-LIMIT  ( -- )
  \ Draw the arena invisible limit, needed to detect crashes.
  7 7 PLOT 0 161 RDRAW 241 0 RDRAW 0 -161 RDRAW -241 0 RDRAW  ;

: FRAME  ( -- )
  \ Draw the arena frame.
  BLACK INK ARENA-LIMIT ARENA-BORDER  ;


( Arena -- save, restore, clear, draw)

: SAVE-ARENA  ( -- )
  \ Save the attributes of the central zone of the arena
  \ (between the horizontal borders) to the first block of
  \ RAM-disc.
  [ TOP-FRAME-ATTRIBUTES COLS +
    BOTTOM-FRAME-ATTRIBUTES OVER - SWAP ]
    LITERAL LO LITERAL CMOVE  ;

: RESTORE-ARENA  ( -- )
  \ Restore the attributes of the central zone of the arena
  \ (between the horizontal borders) from the first block of
  \ RAM-disc.
  LO [ TOP-FRAME-ATTRIBUTES COLS +
       BOTTOM-FRAME-ATTRIBUTES OVER - SWAP ]
       LITERAL LITERAL CMOVE  ;

: CLEAR-ARENA  ( -- )

  \ Clear only the game arena.

  \ First, hide the arena instantaneously by restoring the
  \ saved attributes:
  RESTORE-ARENA

  \ Second, a slower process, actually clear the players'
  \ trails by overwritting the arena with spaces:
  [ ARENA-LINES 1+ ] LITERAL 1 DO
    I 1 AT [ COLS 2 - ] LITERAL  SPACES
  LOOP  ;

: ARENA  ( -- )
  \ Draw the arena.
  -ATTRIBUTES FRAME SAVE-ARENA STATUS  ;

  \ vim: filetype=abersoftforth:fileencoding=utf-8
