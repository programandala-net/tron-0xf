\ tron_0xf.file_02.graphics.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

-->

.( Tron 0xF: graphics )

16384 CONSTANT SYS-SCREEN  \ address of the screen
6912 CONSTANT /SYS-SCREEN  \ bytes of the screen
6144 CONSTANT /SYS-SCREEN-BITMAP  \ bytes of the screen bitmap

: SAVE-DISPLAY  ( -- )
  \ Save a copy of the whole display image
  \ to block 1 of the Forth RAM disk.
  SYS-SCREEN [ 1 'BLOCK ] LITERAL /SYS-SCREEN CMOVE  ;

: RESTORE-DISPLAY  ( -- )
  \ Save the copy of the whole display image
  \ from block 1 of the Forth RAM disk.
  [ 1 'BLOCK ] LITERAL SYS-SCREEN /SYS-SCREEN CMOVE  ;

3 11 THRU

( Font)

  \ The game fonts are loaded from tape at the end of the
  \ compilation. Words are defined to switch them on and off:

  768 CONSTANT /FONT  \ size in bytes
  \ Block 8 of the Forth RAM disk is used to store the font.
8 'BLOCK CONSTANT FONT

  \ Set the game font:
: +FONT  ( -- )  [ FONT 256 - ] LITERAL SYS-CHARS ! ;

  \ Set the ROM font:
: -FONT  ( -- )  15360 SYS-CHARS ! ;
  
  \ Double height digits are used to print the scores.  They
  \ are hold in a bank of 20 UDG. The first 10 UDG are the top
  \ halves of the digits, the second 10 UDG are the bottom
  \ halves.  Every set is switched instead of the game font
  \ when needed.

10 2 * 8 * CONSTANT /DIGITS-UDG  \ size in bytes
/DIGITS-UDG BUFFER: DIGITS-UDG

: DIGITS>CHARS  ( a1 -- a2 )
  \ Convert the address of UDG digits to the address of a fake
  \ font that contains those digits.
  [CHAR] 0 BL - 8 * -  256 -  ;

: +HI-DIGITS  ( -- )
  \ Set the high part of the double height digits
  \ as the current font.
  [ DIGITS-UDG DIGITS>CHARS ] LITERAL
  SYS-CHARS ! ;

: +LO-DIGITS  ( -- )
  \ Set the low part of the double height digits
  \ as the current font.
  [ DIGITS-UDG /DIGITS-UDG 2 / +  DIGITS>CHARS ] LITERAL
  SYS-CHARS ! ;

( UDG fonts)

  \ User Defined Graphics are used for the Spanish and
  \ Esperanto characters. Two banks are used. They are loaded
  \ from tape at the end of the compilation. The correspondent
  \ UDG bank is switched when the user changes the language in
  \ the game menu.

SYS-UDG @ CONSTANT UDG0  \ address of the default UDG bank

  \ UDG bank for the Esperanto letters.
12 8 * CONSTANT /EO-UDG  \ size in bytes
/EO-UDG BUFFER: EO-UDG

  \ UDG bank for the Spanish letters and characters.
18 8 * CONSTANT /ES-UDG  \ size in bytes
/ES-UDG BUFFER: ES-UDG

HERE: UDG-BANK
  \ Addresses of the UDG banks used for every language.
  UDG0 , EO-UDG , ES-UDG ,

: +UDG  ( n -- )
  \ Set the UDG bank required by the given language number.
  CELLS UDG-BANK + @ SYS-UDG !  ;

: -UDG  ( -- )
  \ Set the default UDG bank.
  \ It contains the frame graphs.
  UDG0 SYS-UDG !  ;
  
( Screen -- generic)

: CLS0  ( -- )
  \ Clear the screen with the default colors.
  BLACK PAPER  BLACK BORDER  WHITE INK  CLS  ;

: BLACKOUT  ( -- )
  \ Erase the whole display,
  \ both the bitmap and the attributes
  \ (what means black ink and black paper).
  SYS-SCREEN /SYS-SCREEN ERASE  ;

  \ Size of the screen:
32 CONSTANT COLS
24 CONSTANT LINES

  \ Size of the game arena (inside its frame):
COLS 2 - CONSTANT ARENA-COLS
LINES 4 - CONSTANT ARENA-LINES

  \ Attributes addresses of the arena frame:
ATTRIBUTES CONSTANT TOP-FRAME-ATTRIBUTES
ATTRIBUTES COLS LINES 3 - * + CONSTANT BOTTOM-FRAME-ATTRIBUTES

( Center justified texts and title )

  \ XXX OLD
  \ : HOME  ( -- )  0 DUP AT  ;

: CENTERED  ( len -- column )
  \ Convert a string length to the column required
  \ to print the string centered.
  COLS SWAP - 2 /  ;

: |AT|  ( line len -- )
  \ Put the cursor on the given line, on the column
  \ required to center a text of the given length.
  CENTERED AT  ;

  \ XXX OLD
  \ : |LINESPACES|  ( len line -- )
  \   \ Type spaces centered on a given line.
  \   OVER |AT| SPACES  ;

: |LINETYPE|  ( ca len line -- )
  \ Type a string centered on a given line.
  OVER |AT| TYPE  ;

: REMARK  ( ca len -- )
  \ Type a string centered on the last line.
  [ LINES 1- ] LITERAL |LINETYPE|  ;

: AT-COL  ( col -- )
  \ Move the cursor position to the given column
  \ of the current line.
  AT@ DROP SWAP AT  ;

  \ XXX OLD
  \ : |TYPE|  ( ca len -- )
  \   \ Type a string centered on the current line.
  \   DUP CENTERED AT-COL TYPE  ;

  \ The last two blocks (9..10) of the Forth RAM disk
  \ are used to store the graphic of the title, that 
  \ ocuppies 2 KiB:
9 'BLOCK CONSTANT TITLE-ADDRESS

: TITLE  ( -- )
  \ Show the main title, copying its graphic to the screen
  \ and setting its color attributes.
  \ The graphic ocuppies the first third of the screen
  \ (2048 bytes of bitmap and 256 bytes of color attributes).
  TITLE-ADDRESS SYS-SCREEN 2048 CMOVE
  22528 256 RED FILL  ;

( Contents zone )

  \ The zone above the title is called the contents zone.  It
  \ is used for menus, configuration and information
  \ (instructions, about, etc.).

8 CONSTANT CONTENTS-LINE  \ first usable line

: PAGE  ( -- )
  \ Start a new contents page.
  BLACKOUT TITLE  CONTENTS-LINE 0 AT  BLACK INK  ;

  \ Calculate the screen attributes zone of the contents zone.
CONTENTS-LINE COLS *  \ bytes to skip
ATTRIBUTES OVER +  /ATTRIBUTES ROT -  ( a len )
  2CONSTANT CONTENTS-ATTRIBUTES

  \ Calculate the screen bitmap zone of the contents zone.
CONTENTS-LINE COLS * 8 *  \ bytes to skip (8 scans/char)
SYS-SCREEN OVER +  /SYS-SCREEN-BITMAP ROT - ( a len )
  2CONSTANT CONTENTS-BITMAP

: WIPE-CONTENTS  ( -- )
  \ Erase the screen attributes of the contents zone (what
  \ equals black ink and black paper), position the cursor at
  \ the start of the zone and set black ink for the text to be
  \ printed.  This is used to clear the menu and other pages
  \ without deleting the title header, and hidding the new
  \ contents until they are fully printed.
  CONTENTS-ATTRIBUTES ERASE  CONTENTS-BITMAP ERASE
  CONTENTS-LINE 0 AT  BLACK INK  ;

: REVEAL-CONTENTS  ( -- )
  \ Set the screen attributes of the contents zone to the
  \ normal values (white ink).  This is used to show the menu
  \ and other pages instantaneously after updating them.
  CONTENTS-ATTRIBUTES WHITE FILL  ;

( Status bar)

22 CONSTANT STATUS-LINE

  \ XXX OLD -- version with normal characters
  \ : SCORE. ( a color line column -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits.
  \ AT INK @ S->D <# # # # #> TYPE  ;
: (.SCORE) ( a1 column a2 -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits and double height characters.
  \ a1 = score
  \ a2 = color
  @ INK >R
  STATUS-LINE R AT  @ S->D <# # # # #> 2DUP +HI-DIGITS TYPE
  STATUS-LINE 1+ R> AT  +LO-DIGITS TYPE +FONT  ;

HERE: SCORE-COLUMN-TABLE
  \ Columns of the scores on the status bar.
  1 C, 28 C, 14 C,

: SCORE-COLUMN  ( -- column )
  \ Column of the current player's score.
  PLAYER SCORE-COLUMN-TABLE + C@  ;

: .SCORE  ( -- )
  \ Print the the current player's score.
  PLAYER-SCORE SCORE-COLUMN PLAYER-COLOR (.SCORE)  ;

: STATUS  ( -- )
  \ Show the status bar.
  \ XXX TODO improve (now it shows only the scores)
  PLAYERS 0 DO  I PLAYER! .SCORE  LOOP  ;

( COLOR-FRAME )

RED BLACK PAPERY + CONSTANT FRAME-COLOR

: FRAME-BAR  ( a -- )  COLS FRAME-COLOR FILL  ;

: COLOR-FRAME  ( -- )

  \ Color the arena frame.

  TOP-FRAME-ATTRIBUTES FRAME-BAR  \ top part
  BOTTOM-FRAME-ATTRIBUTES FRAME-BAR  \ bottom part
  \ Left and right parts:
  BOTTOM-FRAME-ATTRIBUTES TOP-FRAME-ATTRIBUTES DO
    FRAME-COLOR DUP I C!  I [ COLS 1 - ] LITERAL + C!
  COLS +LOOP  ;

( DRAW-FRAME FRAME )

: DRAW-FRAME  ( -- )

  \ Draw the arena frame.

  \ Corners.
  0  0 AT 145 EMIT   0 31 AT 146 EMIT
  21 0 AT 144 EMIT  21 31 AT 147 EMIT

  \ Horizontal sides.
  31 1 DO  0 I AT 149 EMIT  21 I AT 151 EMIT  LOOP

  \ Vertical sides.
  21 1 DO  I 0 AT 148 EMIT  I 31 AT 150 EMIT  LOOP  ;

: FRAME  ( -- )
  \ Draw the arena frame.
  -UDG BLACK INK DRAW-FRAME COLOR-FRAME  LANG @ +UDG  ;

( Arena -- save, restore, clear, draw)

: SAVE-ARENA  ( -- )
  \ Save the attributes of the central zone of the arena
  \ (between the horizontal borders) to the first block of
  \ the Forth RAM-disc.
  [ TOP-FRAME-ATTRIBUTES COLS +
    BOTTOM-FRAME-ATTRIBUTES OVER - SWAP ]
    LITERAL LO LITERAL CMOVE  ;

: RESTORE-ARENA  ( -- )
  \ Restore the attributes of the central zone of the arena
  \ (between the horizontal borders) from the first block of
  \ the Forth RAM-disc.
  LO [ TOP-FRAME-ATTRIBUTES COLS +
       BOTTOM-FRAME-ATTRIBUTES OVER - SWAP ]
       LITERAL LITERAL CMOVE  ;

: CLEAR-ARENA  ( -- )

  \ Clear only the game arena.

  \ First, hide the arena instantaneously by restoring the
  \ saved attributes:
  RESTORE-ARENA

  \ Second, a slower process, actually clear the players'
  \ trails by overwritting the arena with spaces:
  [ ARENA-LINES 1+ ] LITERAL 1 DO
    I 1 AT [ COLS 2 - ] LITERAL  SPACES
  LOOP  ;

: ARENA  ( -- )
  \ Draw the arena.
  BLACKOUT FRAME SAVE-ARENA STATUS  ;

  \ vim: filetype=abersoftforth
