.( Tron 0xF: graphics )

\ tron_0xf.file_02.graphics.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ -----------------------------------------------------------

  \ The author would be grateful for any constructive
  \ suggestions and bug-reports, via
  \ <http://programandala.net>.

  \ -----------------------------------------------------------

  \ Address and size of the screen
16384 constant sys-screen  6912 constant /sys-screen
                           6144 constant /sys-screen-bitmap
  \ Address and size of the screen attributes
22528 constant attributes  768 constant /attributes

  \ XXX OLD
  \ : save-display  ( -- )
  \   \ Save a copy of the whole display image
  \   \ to screen 2 of the Forth RAM-disk.
  \   sys-screen [ 2 disc-scr ] literal /sys-screen cmove  ;

  \ : restore-display  ( -- )
  \   \ Save the copy of the whole display image
  \   \ from screen 2 of the Forth RAM-disk.
  \   [ 2 disc-scr ] literal sys-screen /sys-screen cmove  ;

2 11 thru

( Font and foreign language chars)

  \ The font, the Spanish and Esperanto characters and other
  \ UDG sets are loaded from tape at the end of the compilation
  \ and stored in the Forth RAM-disk, in order to save a lot of
  \ dictionary space.
  \
  \ The required UDG set is switched when the user changes the
  \ language in the game menu, or when graphics have to be
  \ printed.

768 constant /font  \ size in bytes
8 disc-scr constant font  \ address: RAM-disk screen 8

  \ Set a font.
  \ a = start of the bitmap of the space character, minus 256
  \ 23606 is the system variable "CHARS".
: font!  ( a )  23606 !  ;

  \ Set the game font:
: +font  ( -- )  [ font 256 - ] literal font! ;

  \ Set the ROM font:
: -font  ( -- )  15360 font! ;

  \ UDG set for the Esperanto letters.
12 8 * constant /eo-udg  \ size in bytes
font /font + constant eo-udg  \ address

  \ UDG set for the Spanish letters and characters.
18 8 * constant /es-udg  \ size in bytes
eo-udg /eo-udg + constant es-udg  \ address

( Double height digits and misc UDG)

  \ Double height digits are used to print the scores.  They
  \ are hold in a set of 20 UDG. The first 10 UDGs are the top
  \ halves of the digits, the second 10 UDGs are the bottom
  \ halves.  Every set is switched instead of the game font
  \ when needed.

10 2 * 8 * constant /digits-udg  \ size in bytes
9 disc-scr constant digits-udg  \ address: RAM-disk screen 9

  \ Convert the address of UDG digits to the address of a fake
  \ font that contains those digits. The first UDG defined
  \ in the set must be "0".
: digits>chars  ( a1 -- a2 )
  [ char 0 bl - ] literal 8 * -  256 -  ;

: +hi-digits  ( -- )
  \ Set the high part of the double height digits
  \ as the current font.
  [ digits-udg digits>chars ] literal font! ;

: +lo-digits  ( -- )
  \ Set the low part of the double height digits
  \ as the current font.
  [ digits-udg /digits-udg 2 / +  digits>chars ] literal
  font! ;

  \ Misc UDG set.
18 8 * constant /udg0  \ size in bytes
digits-udg /digits-udg + constant udg0  \ address

  \ Addresses of the UDG sets.
here: udg-set  udg0 , eo-udg , es-udg ,

  \ Activate UDG set number _n_.
  \ 23675 is the system variable "UDG", that holds the address
  \ of the UDG set.
: >udg  ( n -- )  cells udg-set + @ 23675 !  ;

  \ The selection of the UDG set is done with the following two
  \ words:

  \ Activate the UDG set required for the current language.
: lang-udg  ( -- )  lang >udg  ;

  \ Activate the default UDG set.
: graph-udg  ( -- )  0 >udg  ;
  
( Screen -- generic)

: tron-colors  ( -- )
  \ Set the default colors.
  black paper  white ink  black border
  0 flash  0 bright  0 inverse  0 gover  ;

  \ Patch `colors0`.
' tron-colors cfa ' colors0 !

  \ Erase the whole display,
  \ both the bitmap and the attributes
  \ (what means black ink and black paper).
: blackout  ( -- )  sys-screen /sys-screen erase  ;

  \ Size of the screen:
32 constant cols  24 constant lines

  \ lines 2 / 1- constant middle-line \ XXX OLD
lines 1- constant bottom-line 

  \ Size of the game arena (inside its frame):
 cols 2 - constant arena-cols
lines 4 - constant arena-lines

  \ Attributes addresses of the arena frame:
                   attributes constant top-frame-attributes
attributes cols lines 3 - * + constant bottom-frame-attributes

( Center justified texts and title )

  \ Convert a string length to the column required
  \ to print the string centered.
: centered  ( len -- column )  cols swap - 2 /  ;

  \ Put the cursor on the given line, at the column
  \ required to center a text of the given length.
: |at|  ( line len -- )  centered at  ;

  \ Type spaces centered on a given line.
: |linespaces|  ( len line -- )  over |at| spaces  ;

  \ Type a string centered on a given line.
: |linetype|  ( ca len line -- )  over |at| type  ;

  \ Type a string centered on the last line.
: remark  ( ca len -- )  bottom-line |linetype|  ;

  \ Erase a string centered on the last line.
:  -remark  ( ca len -- )  nip bottom-line |linespaces|  ;

  \ Move the cursor position to the given column
  \ of the current line.
: at-col  ( col -- )  AT@ drop swap at  ;

  \ XXX OLD
  \ : |TYPE|  ( ca len -- )
  \   \ Type a string centered on the current line.
  \   dup centered at-col type  ;

  \ The last two screens (10..11) of the Forth RAM-disk
  \ are used to store the graphic of the title, that 
  \ ocuppies exactly 2 KiB, one third of the bitmap:
10 disc-scr constant title-address

: title  ( -- )
  \ Show the main title, copying its graphic to the screen
  \ and setting its color attributes.
  \ The graphic ocuppies the first third of the screen
  \ (2048 bytes of bitmap and 256 bytes of color attributes).
  title-address sys-screen 2048 cmove  22528 256 red fill  ;

: type-spaces  ( ca len -- )  nip spaces  ;

( Contents page )

8 value contents-line  \ first usable line

  \ Set ink color and print position ready for new contents.
: at-contents  ( -- )  contents-line 0 at  black ink  ;
: >at-contents  ( n -- )  dup to contents-line at-contents  ;

  \ Start a new contents page.
: page  ( -- )  blackout title 8 >at-contents  ;
: whole-page  ( -- ) blackout 0 >at-contents  ;

: contents-attributes  ( -- a len )
  \ Screen attributes zone of the contents zone.
  contents-line cols *  \ bytes to skip
  attributes over +  /attributes rot -  ;

: contents-bitmap  ( -- a len )
  \ Screen bitmap zone of the contents zone.
  contents-line cols * 8 *  \ bytes to skip (8 scans/char)
  sys-screen over +  /sys-screen-bitmap rot -  ;

( Contents page )

: wipe-contents  ( -- )
  \ Erase the screen attributes of the contents zone (what
  \ equals black ink and black paper), position the cursor at
  \ the start of the zone and set black ink for the text to be
  \ printed.  This is used to clear the menu and other pages
  \ without deleting the title header, and hidding the new
  \ contents until they are fully printed.
  contents-attributes erase  contents-bitmap erase
  at-contents  ;

: reveal-contents  ( -- )
  \ Set the screen attributes of the contents zone to the
  \ normal values (white ink, black paper).  This is used to
  \ show the menu and other pages instantaneously after
  \ updating them.
  contents-attributes white fill  white ink  ;

( Status bar)

22 constant status-line

: (.score) ( n1 n2 -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits and double height characters.
  \ n1 = score
  \ n2 = score column
  >r status-line r at  s->d <# # # # #> 2dup +hi-digits type
     status-line 1+ r> at  +lo-digits type +font  ;

: .score  ( -- )
  \ Print the the current player's score.
  player-score @ player-score-col @
  player-color @ ink (.score)  ;

: status  ( -- )
  \ Show the status bar.
  \ XXX TODO improve (now it shows only the scores)
  last-one? ?exit
  max-players 0 do    i player!  someone? if  .score  then
                loop  ;

: -status  ( -- )
  \ Erase the status bar.
  status-line 0 at  [ cols 2* ] literal spaces  ;

( color-frame )

: papery  ( color -- paper-attribute )  8 *  ;

red constant frame-color
frame-color black papery + constant frame-attribute

: frame-bar  ( a -- )  cols frame-attribute fill  ;

: color-frame  ( -- )

  \ Color the arena frame.

  top-frame-attributes frame-bar  \ top part
  bottom-frame-attributes frame-bar  \ bottom part
  \ Left and right parts:
  bottom-frame-attributes top-frame-attributes do
    frame-attribute dup i c!  i [ cols 1 - ] literal + c!
  cols +loop  ;

( draw-frame frame )

: draw-frame  ( -- )

  \ Draw the arena frame.

  \ Corners.
  0  0 at 145 emit   0 31 at 146 emit
  21 0 at 144 emit  21 31 at 147 emit

  \ Horizontal sides.
  31 1 do  0 i at 149 emit  21 i at 151 emit  loop

  \ Vertical sides.
  21 1 do  i 0 at 148 emit  i 31 at 150 emit  loop  ;

: frame  ( -- )
  \ Draw the arena frame.
  graph-udg black ink draw-frame color-frame lang-udg  ;

( Arena -- save, restore, clear, draw; and .initial )

  \ Calculate the address and length of the arena attributes
  \ Calculate the screen attributes address
  \ of the central zone of the arena
  \ (between the horizontal borders), used during the
  \ compilation of `save-arena` and `restore-arena`.
top-frame-attributes cols + bottom-frame-attributes over - 2dup
  ( a len a len )

: save-arena  ( -- ) ( Compiling: a len -- )
  \ Save the attributes of the central zone of the arena
  \ (between the horizontal borders) to the first screen of the
  \ Forth RAM-disk.
  \
  \ `!csp` is needed at the end, because the compilation
  \ consumes values from the stack, else error 20 ("Definition
  \ not finished") will happen.

  [ 7 disc-scr rot ] literal literal literal cmove [ !csp ]  ;

: restore-arena  ( -- ) ( Compiling: a len -- )
  \ Restore the attributes of the central zone of the arena
  \ (between the horizontal borders) from the first screen of
  \ the Forth RAM-disk.
  \
  \ `!csp` is needed at the end, because the compilation
  \ consumes values from the stack, else error 20 ("Definition
  \ not finished") will happen.

  [ swap 7 disc-scr ] literal literal literal cmove [ !csp ]  ;

: clear-arena  ( -- )

  \ Clear only the game arena.

  \ First, hide the arena instantaneously by restoring the
  \ saved attributes.  Second, a slower process, actually clear
  \ the players' trails by overwritting the arena with spaces.

  restore-arena [ arena-lines 1+ ] literal 1 do
                  i 1 at [ cols 2 - ] literal  spaces
                loop  ;

  \ Draw the arena.
: arena  ( -- )  blackout frame save-arena status  ;

  \ Print the given char as a menu option initial.
: initial.  ( c -- )  1 inverse emit 0 inverse  ;

  \ vim: filetype=abersoftforthafera
