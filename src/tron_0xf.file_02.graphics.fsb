.( Tron 0xF: graphics )

\ tron_0xf.file_02.graphics.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015,2016,2020 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ -----------------------------------------------------------

  \ The author would be grateful for any constructive
  \ suggestions and bug-reports, via
  \ <http://programandala.net>.

  \ -----------------------------------------------------------

16384 constant sys-screen
 6912 constant /sys-screen
 6144 constant /sys-screen-bitmap
  \ Address and size of the screen.

22528 constant attributes
  768 constant /attributes
  \ Address and size of the screen attributes.

2 11 thru

( Font and foreign language chars)

  \ The font, the Spanish and Esperanto characters and other
  \ UDG sets are loaded from tape at the end of the compilation
  \ and stored in the Forth RAM-disk, in order to save a lot of
  \ dictionary space.
  \
  \ The required UDG set is switched when the user changes the
  \ language in the game menu, or when graphics have to be
  \ printed.

768 constant /font \ size in bytes
8 disc-scr constant font \ address: RAM-disk screen 8

: font! ( a -- ) 23606 ! ;
  \ Set font stored at _a_, wich is the start of the bitmap of
  \ the space character, minus 256 23606 is the system variable
  \ "CHARS".

: +font ( -- ) [ font 256 - ] literal font! ;
  \ Set the game font.

: -font ( -- ) 15360 font! ;
  \ Set the ROM font.

12 8 * constant /eo-udg \ size in bytes
font /font + constant eo-udg \ address
  \ UDG set with the Esperanto characters. 

18 8 * constant /es-udg \ size in bytes
eo-udg /eo-udg + constant es-udg \ address
  \ UDG set with the Spanish and Interlingue characters.

( Double height digits and misc UDG)

  \ Double height digits are used to print the scores.  They
  \ are hold in a set of 20 UDG. The first 10 UDGs are the top
  \ halves of the digits, the second 10 UDGs are the bottom
  \ halves.  Every set is switched instead of the game font
  \ when needed.

10 2 * 8 * constant /digits-udg \ size in bytes
9 disc-scr constant digits-udg \ address: RAM-disk screen 9

: digits>chars ( a1 -- a2 )
  [ char 0 bl - ] literal 8 * - 256 - ;
  \ Convert the address of UDG digits to the address of a fake
  \ font that contains those digits. The first UDG defined
  \ in the set must be "0".

: +hi-digits ( -- )
  [ digits-udg digits>chars ] literal font! ;
  \ Set the high part of the double height digits
  \ as the current font.

: +lo-digits ( -- )
  [ digits-udg /digits-udg 2 / + digits>chars ] literal font! ;
  \ Set the low part of the double height digits
  \ as the current font.

18 8 * constant /udg0 \ size in bytes
digits-udg /digits-udg + constant udg0 \ address
  \ Misc UDG set.

here: udg-set  udg0 , eo-udg , es-udg , es-udg ,
  \ Addresses of the UDG sets.

: >udg ( n -- ) cells udg-set + @ 23675 ! ;
  \ Activate UDG set number _n_.
  \ 23675 is the system variable "UDG", that holds the address
  \ of the UDG set.

  \ The selection of the UDG set is done with the following two
  \ words:

: lang-udg ( -- ) lang >udg ;
  \ Activate the UDG set required for the current language.

: graph-udg ( -- ) 0 >udg ;
  \ Activate the default UDG set.

( Screen -- generic)

: tron-colors ( -- ) black paper  white ink  black border
                     0 flash  0 bright  0 inverse  0 gover ;
  \ Set the default colors.

' tron-colors cfa ' colors0 !
  \ Patch `colors0`.

: blackout ( -- ) sys-screen /sys-screen erase ;
  \ Erase the whole display,
  \ both the bitmap and the attributes
  \ (what means black ink and black paper).

32 constant cols  24 constant rows
  \ Size of the screen.

rows 1- constant bottom-row

cols 2 - constant arena-cols
rows 4 - constant arena-rows
  \ Size of the game arena (inside its frame).

                   attributes constant top-frame-attributes
attributes cols rows 3 - * + constant bottom-frame-attributes
  \ Attributes addresses of the arena frame.

( Center justified texts and title )

: centered ( len -- column ) cols swap - 2 / ;
  \ Convert a string length to the column required
  \ to print the string centered.

: |at| ( row len -- ) centered at ;
  \ Put the cursor on the given row, at the column
  \ required to center a text of the given length.

: |rowspaces| ( len row -- ) over |at| spaces ;
  \ Type spaces centered on a given row.

: |rowtype| ( ca len row -- ) over |at| type ;
  \ Type a string centered on a given row.

: remark ( ca len -- ) bottom-row |rowtype| ;
  \ Type a string centered on the last row.

: -remark ( ca len -- ) nip bottom-row |rowspaces| ;
  \ Erase a string centered on the last row.

: at-col ( col -- ) AT@ drop swap at ;
  \ Move the cursor position to the given column
  \ of the current row.

10 disc-scr constant title-address
  \ The last two screens (10..11) of the Forth RAM-disk
  \ are used to store the graphic of the title, that
  \ ocuppies exactly 2 KiB, one third of the bitmap:

: title ( -- )
  title-address sys-screen 2048 cmove  22528 256 red fill ;
  \ Show the main title, copying its graphic to the screen
  \ and setting its color attributes.
  \ The graphic ocuppies the first third of the screen
  \ (2048 bytes of bitmap and 256 bytes of color attributes).

: type-spaces ( ca len -- ) nip spaces ;

( Contents page )

8 value contents-row \ first usable row

: at-contents ( -- ) contents-row 0 at  black ink ;
  \ Set ink color and print position ready for new contents.

: >at-contents ( n -- ) dup to contents-row at-contents ;
  \ Set ink color and print position at row _n_, ready for new
  \ contents.

: page ( -- ) blackout title 8 >at-contents ;
  \ Start a new contents page with title.

: whole-page ( -- ) blackout 0 >at-contents ;
  \ Start a new contents page without title.

: contents-attributes ( -- a len )
  contents-row cols * \ bytes to skip
  attributes over +  /attributes rot - ;
  \ Screen attributes zone of the contents zone.

: contents-bitmap ( -- a len )
  contents-row cols * 8 * \ bytes to skip (8 scans/char)
  sys-screen over +  /sys-screen-bitmap rot - ;
  \ Screen bitmap zone of the contents zone.

: wipe-contents ( -- )
  contents-attributes erase contents-bitmap erase at-contents ;
  \ Erase the screen attributes of the contents zone (what
  \ equals black ink and black paper), position the cursor at
  \ the start of the zone and set black ink for the text to be
  \ printed.  This is used to clear the menu and other pages
  \ without deleting the title header, and hidding the new
  \ contents until they are fully printed.

: reveal-contents ( -- )
  contents-attributes white fill  white ink ;
  \ Set the screen attributes of the contents zone to the
  \ normal values (white ink, black paper).  This is used to
  \ show the menu and other pages instantaneously after
  \ updating them.

( Status bar)

22 constant status-row

: (.score) ( n1 n2 -- )
  >r status-row r at  s->d <# # # # #> 2dup +hi-digits type
     status-row 1+ r> at  +lo-digits type +font ;
  \ Print the content _n1_ of a score variable at colum _n2_
  \ using 3 digits and double height characters.

: .score ( -- )
  player-score @ player-score-col @
  player-color @ ink (.score) ;
  \ Print the the current player's score.

: status ( -- )
  last-one? ?exit
  max-players 0 do    i player!  someone? if  .score  then
                loop ;
  \ Show the status bar.
  \ XXX TODO improve (now it shows only the scores)

: -status ( -- )
  status-row 0 at  [ cols 2* ] literal spaces ;
  \ Erase the status bar.

( color-frame )

: papery ( color -- paper-attribute ) 8 * ;

red constant frame-color
frame-color black papery + constant frame-attribute

: frame-bar ( a -- ) cols frame-attribute fill ;

: color-frame ( -- )
  top-frame-attributes frame-bar \ top part
  bottom-frame-attributes frame-bar \ bottom part
  \ Left and right parts:
  bottom-frame-attributes top-frame-attributes do
    frame-attribute dup i c!  i [ cols 1 - ] literal + c!
  cols +loop ;
  \ Color the arena frame.

( draw-frame frame )

: draw-frame ( -- )
  0  0 at 145 emit   0 31 at 146 emit
  21 0 at 144 emit  21 31 at 147 emit \ corners
  31 1 do  0 i at 149 emit
          21 i at 151 emit loop \ horizontal sides
  21 1 do i  0 at 148 emit
          i 31 at 150 emit loop ; \ vertical sides
  \ Draw the arena frame.

: frame ( -- )
  graph-udg black ink draw-frame color-frame lang-udg ;
  \ Draw the arena frame.

( Arena -- save, restore, clear, draw; and .initial )

top-frame-attributes cols +
bottom-frame-attributes over - 2dup ( a len a len )
  \ Calculate the address and length of the arena attributes
  \ Calculate the screen attributes address
  \ of the central zone of the arena
  \ (between the horizontal borders), used during the
  \ compilation of `save-arena` and `restore-arena`.

: save-arena ( -- ) ( Compiling: a len -- )
  [ 7 disc-scr rot ] literal literal literal cmove [ !csp ] ;
  \ Save the attributes of the central zone of the arena
  \ (between the horizontal borders) to the first screen of the
  \ Forth RAM-disk.
  \
  \ `!csp` is needed at the end, because the compilation
  \ consumes values from the stack, else error 20 ("Definition
  \ not finished") will happen.


: restore-arena ( -- ) ( Compiling: a len -- )
  \ Restore the attributes of the central zone of the arena
  \ (between the horizontal borders) from the first screen of
  \ the Forth RAM-disk.
  \
  \ `!csp` is needed at the end, because the compilation
  \ consumes values from the stack, else error 20 ("Definition
  \ not finished") will happen.

  [ swap 7 disc-scr ] literal literal literal cmove [ !csp ] ;

: clear-arena ( -- )
  restore-arena [ arena-rows 1+ ] literal 1 do
                  i 1 at [ cols 2 - ] literal  spaces
                loop ;
  \ Clear only the game arena.
  \
  \ First, hide the arena instantaneously by restoring the
  \ saved attributes.  Second, a slower process, actually clear
  \ the players' trails by overwritting the arena with spaces.

: arena ( -- ) blackout frame save-arena status ;
  \ Draw the arena.

: initial. ( c -- ) 1 inverse emit 0 inverse ;
  \ Print the given char as a menu option initial.

  \ vim: filetype=abersoftforthafera
