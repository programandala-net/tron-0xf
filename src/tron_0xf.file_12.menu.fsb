\ tron_0xf.file_12.menu.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

.( Tron 0xF: menu )

2 10 THRU

( Menu -- data )

8 CONSTANT OPTIONS       \ number of menu options
2 CONSTANT LINES/OPTION  \ lines occupied per menu option

OPTIONS BUFFER: MENU-KEYS
  \ A table to store the menu keys. They change depending on
  \ the current language. This table is updated every time the
  \ menu is printed, using the initials of the menu options.

: OPTION-2#$  ( -- ca len )
  \ Menu option 2 with the number of players.
  OPTION-2$ PLAYERS S->D <# #S #> S+  ;
  
: OPTION-3#$  ( -- ca len )
  \ Menu option 3 with the status of the sound.
  OPTION-3$ SOUND? @ ON/OFF$ S+  ;
  
HERE: MENU-OPTIONS
  
  \ Table that holds the cfa of the words that return the
  \ localized texts of the menu options.

  ' OPTION-0$ CFA ,   ' OPTION-1$ CFA ,  ' OPTION-2#$ CFA ,
  ' OPTION-3#$ CFA ,  ' OPTION-4$ CFA ,  ' OPTION-5$ CFA ,
  ' OPTION-6$ CFA ,   ' OPTION-7$ CFA ,

( Menu -- language and commands)

: CHANGE-LANGUAGE  ( -- )
  \ Change the current language.
  LANG @ 1+ DUP LANGS < *  DUP LANG ! +UDG WIPE-CONTENTS  ;

: CHANGE-PLAYERS  ( -- )
  \ Change the number of players.
  PLAYERS 1+ DUP [ MAX-PLAYERS 1+ ] LITERAL < * 1 MAX
  TO PLAYERS  ;

: TOGGLE-SOUND  ( -- )
  \ Toggle the game sounds.
  SOUND? @ 0= DUP SOUND? ! SOUND  ;

: ABOUT  ( -- )
  WIPE-CONTENTS COPYRIGHT CR CR
  AUTHORS MORE  LICENSE-1 MORE  LICENSE-2 MORE  ;

: INSTRUCTIONS  ( -- )
  WIPE-CONTENTS (INSTRUCTIONS) MORE  ;

: FINISH  ( -- )
  CLS0 -FONT QUIT-MESSAGE QUIT  ;

( Menu commands table)

HERE: MENU-COMMANDS

  \ Execution table of the menu commands.
  \
  \ Every command must leave the screen ready to print the
  \ menu, except the ink color: commands that use the whole
  \ screen must do `PAGE` at the end; commands that use only
  \ the contents zone must do `WIPE-CONTENTS` at the end;
  \ commands that change only their own menu option must do
  \ nothing.

  ' CHANGE-LANGUAGE CFA ,
  ' INSTRUCTIONS CFA ,
  ' CHANGE-PLAYERS CFA ,
  ' TOGGLE-SOUND CFA ,
  ' CONFIGURATION CFA ,
  ' GAME CFA ,
  ' ABOUT CFA ,
  ' FINISH CFA ,

( Menu effect)

: MENU-EFFECT  ( -- )
  \ Do some screen effect on the menu.
  \ XXX TODO
  ;

( Menu options)

: INITIAL.  ( c -- )
  \ Print the given char as a menu option initial.
  1 INVERSE EMIT 0 INVERSE  ;

: INITIAL!  ( n c -- )
  \ Store char 'c' into the 'n' position of the
  \ `MENU-KEYS` table.
  SWAP MENU-KEYS + C!  ;

: OPTION-INITIAL  ( ca n -- )
  \ Print the initial of the menu option number n,
  \ stored in the given address, and also store it
  \ into the `MENU-KEYS` table.
  SWAP C@ UPPERC DUP INITIAL. INITIAL!  ;

: OPTION>LINE  (  n -- line )
  \ Convert a menu option number to its line.
  LINES/OPTION * CONTENTS-LINE +  ;

: OPTION>STRING  ( n -- ca len )
  \ Convert a menu option number to its localized text.
  CELLS MENU-OPTIONS + @ EXECUTE  ;

( Option)

: OPTION  ( n -- )
  \ Print menu option number n. 
  \ XXX TODO make it much faster: calculate
  \ the coordinates when the strings are created, and
  \ store them in a table.
  DUP >R                  ( n ) ( R: n )
  DUP OPTION>LINE         ( n line ) 
  >R OPTION>STRING        ( ca len ) ( R: n line )
  DUP CENTERED            ( ca len col )
  R> SWAP                 ( ca len line col ) ( R: n )
  2DUP AT 2OVER DROP R>   ( ca len line col ca n ) ( R: )
  OPTION-INITIAL          ( ca len line col )
  1+ AT 1 /STRING TYPE  ;

( Menu)

: MENU  ( -- )
  \ Print the menu.
  WHITE INK  OPTIONS 0 DO  I OPTION  LOOP  256 MS  ;

( Valid option)

: VALID-OPTION?  ( c -- cfa tf | ff )
  \ Is the given character a valid menu option in the current
  \ language? If so, return the cfa of its associated command
  \ and a true flag; otherwise return a false flag.
  UPPERC
  FALSE SWAP  \ default exit flag
  OPTIONS 0 DO
    DUP MENU-KEYS I + C@ =  \ valid key?
    IF  2DROP MENU-COMMANDS I CELLS + @ TRUE DUP LEAVE  THEN
  LOOP  DROP  ;

: MENU-KEY  ( -- c )
  \ Wait until a key to be pressed and return its code.
  BEGIN  INKEY? ?EXIT MENU-EFFECT  AGAIN  ;

: VALID-OPTION  ( -- cfa )
  \ Wait until a valid menu option is chosen and then
  \ return the cfa of its associated command.
  BEGIN  MENU-KEY VALID-OPTION?  UNTIL  KEY-SOUND  ;

( Boot)

: INIT  ( -- )
  +SCREEN +FONT PAGE  ;

: RUN  ( -- )
  \ Endless loop: Show the menu and execute the chosen option.
  INIT BEGIN  MENU VALID-OPTION EXECUTE  AGAIN  ;

  \ vim: filetype=abersoftforth
