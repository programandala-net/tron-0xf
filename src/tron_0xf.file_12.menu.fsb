.( Tron 0xF: menu )

\ tron_0xf.file_12.menu.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

2 10 thru

( Menu -- data )

8 constant options       \ number of menu options
2 constant lines/option  \ lines occupied per menu option

options buffer: menu-keys
  \ A table to store the menu keys. They change depending on
  \ the current language. This table is updated every time the
  \ menu is printed, using the initials of the menu options.

:noname  ( -- ca len )
  \ Menu option 3 with the status of the sound.
  option-3$ sound? @ on/off$ s+  ;

:noname  ( -- ca len )
  \ Menu option 2 with the number of players.
  option-2$ players s->d <# #s #> s+  ;
  
here: menu-options
  
  \ Table that holds the cfa of the words that return the
  \ localized texts of the menu options.

  ' option-0$ cfa ,   ' option-1$ cfa ,
  , ,  \ options 2 and 3 created with `:NONAME` above
  ' option-4$ cfa ,  ' option-5$ cfa ,
  ' option-6$ cfa ,   ' option-7$ cfa ,

( Menu -- language and commands)

: change-language  ( -- )
  \ Change the current language.
  lang 1+ dup langs < *  dup to lang  +udg wipe-contents  ;

: change-players  ( -- )
  \ Change the number of players.
  \ White ink has to be set at the end in order to
  \ prevent flickering when updating the menu,
  \ because the way the screen is uptaded sets black ink
  \ as default.
  players 1+ dup [ max-players 1+ ] literal < * 1 max
  to players  white ink  ;

: toggle-sound  ( -- )
  \ Toggle the game sounds.
  \ White ink has to be set at the end in order to
  \ prevent flickering when updating the menu,
  \ because the way the screen is uptaded sets black ink
  \ as default.
  sound? dup 1 toggle @ sound  white ink  ;

: about  ( -- )
  wipe-contents copyright cr cr
  authors more  license-1 more  license-2 more  ;

: instructions  ( -- )
  wipe-contents (instructions) more  ;

: finish  ( -- )
  cls0 -font quit-message quit  ;

( Menu commands table)

here: menu-commands

  \ Execution table of the menu commands.
  \
  \ Every command must leave the screen ready to print the
  \ menu: commands that use the whole screen must call `PAGE`;
  \ commands that use only the contents zone must call
  \ `WIPE-CONTENTS` (or `MORE`, that calls it); commands that
  \ change only their own menu option must set ink to white.

  ' change-language cfa ,
  ' instructions cfa ,
  ' change-players cfa ,
  ' toggle-sound cfa ,
  ' configuration cfa ,
  ' game cfa ,
  ' about cfa ,
  ' finish cfa ,

( Menu options)

: initial.  ( c -- )
  \ Print the given char as a menu option initial.
  1 inverse emit 0 inverse  ;

: initial!  ( n c -- )
  \ Store char 'c' into the 'n' position of the
  \ `MENU-KEYS` table.
  swap menu-keys + c!  ;

: option-initial  ( ca n -- )
  \ Print the initial of the menu option number n,
  \ stored in the given address, and also store it
  \ into the `MENU-KEYS` table.
  swap C@ upperc dup initial. initial!  ;

: option>line  (  n -- line )
  \ Convert a menu option number to its line.
  lines/option * contents-line +  ;

: option>string  ( n -- ca len )
  \ Convert a menu option number to its localized text.
  cells menu-options + @ execute  ;

( Option)

: option  ( n -- )
  \ Print menu option number n. 
  \ XXX TODO make it much faster: calculate
  \ the coordinates when the strings are created, and
  \ store them in a table.
  dup >r                  ( n ) ( R: n )
  dup option>line         ( n line ) 
  >r option>string        ( ca len ) ( R: n line )
  dup centered            ( ca len col )
  r> swap                 ( ca len line col ) ( R: n )
  2dup at 2over drop r>   ( ca len line col ca n ) ( R: )
  option-initial          ( ca len line col )
  1+ at 1 /string type  ;

( Menu)

: menu  ( -- )
  \ Print the menu.
  options 0 do  i option  loop  reveal-contents 256 ms  ;

( Valid option)

: valid-option?  ( c -- cfa tf | ff )
  \ Is the given character a valid menu option in the current
  \ language? If so, return the cfa of its associated command
  \ and a true flag; otherwise return a false flag.
  upperc
  false swap  \ default exit flag
  options 0 do
    dup menu-keys i + C@ =  \ valid key?
    if  2drop menu-commands i cells + @ true dup leave  then
  loop  drop  ;

: menu-key  ( -- c )
  \ Wait until a key is pressed then and return its code.
  begin  inkey? ?exit  again  ;

: valid-option  ( -- cfa )
  \ Wait until a valid menu option is chosen and then
  \ return the cfa of its associated command.
  begin  menu-key valid-option?  until  key-sound  ;

( Boot)

  \ Init the circular string-buffer.
  128 allot-csb

: bye  ( -- )  mon  ;

: init  ( -- )  +screen +font cls0 page  ;

: run  ( -- )
  \ Endless loop: Show the menu and execute the chosen option.
  init begin  menu valid-option execute  again  ;

  \ vim: filetype=abersoftforthafera
