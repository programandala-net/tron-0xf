.( Tron 0xF: configuration -- part 1 )

\ tron_0xf.file_08.configuration.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015,2016,2020 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ -----------------------------------------------------------

  \ The author would be grateful for any constructive
  \ suggestions and bug-reports, via
  \ <http://programandala.net>.

  \ -----------------------------------------------------------

11 constant /key-desc
  \ Max length of a player key description in any language.

contents-row
1+ dup constant sound-row   2+ dup constant vehicle-row
2+ dup constant pilot-row   2+ dup constant color-row
2+     constant keys-row
  \ Rows of some parts of the config menu.

0 constant key-desc-col \ column of the key description

: option-pause ( -- ) 125 ms ;

2 11 thru

( Key descriptions )

: +key-desc-col ( ca len row -- ca len row col' )
  over /key-desc swap - ;
  \ Relative column of a key description,
  \ depending on its length; it's relative to
  \ the absolute column of the key descriptions.

: (type-key-desc) ( ca len row col -- )
  key-desc-col + at type ;
  \ Print a key description, on the given row.
  \ col = columns from the left margin of its region.

: |key-desc ( ca len row -- )
  0 (type-key-desc) ;
  \ Print a key description, on the given row,
  \ at the left of its region.

( Key descriptions and positions )

here: key-descs  ] up$ down$ left$ right$ [
  \  A table that holds the cfa of the four texts used
  \  to describe the player keys. When executed, they
  \  return a string in the current language.

: key-desc ( n -- ca len ) key-descs swap >execute ;
  \ Get the _n_ text from the `key-descs` table.

: key. ( a -- ) key-name graph-udg emit lang-udg ;
  \ Print a key name.
  \ a = key address in the keys table

: player-key. ( n -- ) cells player-keys + @ key. ;
  \ Print the name of the given key of the current player.
  \ n = key number in the table

here: key-columns  12 c, 19 c, 26 c,
  \ Columns of the player keys.

: pilot-col ( n -- col ) key-columns + c@ ;
  \ Column of the pilot number _n_.

: player-col ( -- col ) player pilot-col ;
  \ Column of the current player's vehicle.

: key#>coords ( n -- row col ) keys-row + player-col ;
  \ Convert a key number _n_ (0..3) of the current player
  \ to the cursor coordinates of the key in the pilot menu.

: (key-prompt) ( n f -- )
  flash dup key#>coords at player-key. ;
  \ Activate or deactivate the prompt of a key
  \ of the current player.
  \ n = key number in the current players' key table
  \ f = flash?

: +key-prompt ( a n -- ) 1 (key-prompt) 0 flash ;
  \ Activate the prompt of a current player's key.
  \ n = key number in the current players' key table

: -key-prompt ( a n -- ) 0 (key-prompt) ;
  \ Deactivate the prompt of a current player's key.
  \ n = key number in the current players' key table

( Pilot -- human, robot or none )

here: pilot-controls human , robot , none ,
  \ Execution table.

: pilot-key? ( c -- n tf | ff )
  s" HRN" \ valid keys (the same in the three languages)
  players 1 = minus + \ remove "N" if players=1
  char-in-string? ;
  \ Is the given (uppercase) char _c_
  \ a valid answer for a pilot option?

: pilot-option ( -- n ) begin akey upperc pilot-key? until ;
  \ Wait for a valid key press for a pilot option
  \ and return its index (0..2) in the `pilot-controls`
  \ table.

: pilot-control ( -- cfa | 0 )
  pilot-option cells pilot-controls + @ ;
  \ Wait for a valid key press for a pilot option
  \ and return the cfa of the correspondent control
  \ word (for human or robot), or zero (for none).

( Config the pilot )

: at-pilot ( -- ) pilot-row player-col at ;
  \ Move the cursor to the pilot of the current player.

: erase-pilot ( -- ) at-pilot 6 spaces ;
  \ Erase the pilot of the current player.

: show-pilot ( -- ) at-pilot human|robot|none$ type ;
  \ Print the pilot of the current player.

: player-controls ( -- )
  max-players 0 do i player!
                   player-pilot @ player-control !  loop ;
  \ Init every `player-control` with `player-pilot`;
  \ `player-pilot` holds the permanent type of pilot, while
  \ `player-control` holds a temporaray copy that may
  \ change during the game.

: update-players ( -- )
  player-controls  0  max-players 0 do
                        i player!  player-control @ 0<> +
                      loop  to players ;
  \ Update the number of actual players,
  \ by counting how many players are human or robot.

: change-pilot ( -- )
  pilot-help$ remark  erase-pilot 1 flash show-pilot 0 flash
  pilot-control player-pilot !
  erase-pilot show-pilot  pilot-help$ -remark ;
  \ Change the pilot of the current player.

( Config the keys; pilot keys )

: valid-game-key ( -- a )
  0 begin drop pressed dup caps-shift-key <> until ;
  \ Check all keys forever until a valid one is pressed.
  \ Return its address in the `keys` table.
  \ a = address in the `keys` table

: change-keys ( -- )
  keys/player 0 do
    i +key-prompt 512 ms valid-game-key player-keys i cells + !
    i -key-prompt
  loop ;
  \ Change the keys of the current player.

: pilot-menu-key ( n -- ) dup key#>coords at player-key. ;
  \ Show a key of the pilots menu,
  \ for the 'n' key of the current player.

: hide-keys ( -- ) keys/player 0 do
                     keys-row i + player-col at 2 spaces
                   loop ;
  \ Hide the keys of the current player.

: show-keys ( -- ) keys/player 0 do i pilot-menu-key loop ;
  \ Show the keys of the current player.

  \ vim: filetype=abersoftforthafera
