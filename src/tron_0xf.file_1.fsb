\ Tron 0xF
\ A game written in ZX Spectrum's Abersoft Forth.

\ tron.file_1.fsb
\ This file is the 2nd part of the source.
\ It contains the graphics words.

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ Licencia/Permesilo/License: GPL 3

\ http://programandala.net/es.programa.tron.html

  \ -----------------------------------------------------------
  \ fsb directives

  \ The following '#vim' directives, processed by fsb,
  \ translate the UTF-8 chars in this source file to the ZX
  \ Spectrum UDG defined in the first file <tron.part_0.fsb>):

  \ #vim %substitute@á@\=nr2char(145)@g
  \ #vim %substitute@é@\=nr2char(147)@g
  \ #vim %substitute@í@\=nr2char(149)@g
  \ #vim %substitute@ó@\=nr2char(151)@g
  \ #vim %substitute@ú@\=nr2char(153)@g
  \ #vim %substitute@ñ@\=nr2char(157)@g
  \ #vim %substitute@¿@\=nr2char(158)@g
 
  \ #vim %substitute@Ĉ@\=nr2char(144)@g
  \ #vim %substitute@ĝ@\=nr2char(147)@g
  \ #vim %substitute@ŭ@\=nr2char(155)@g

.( Loading Tron: graphics )

2 9 THRU
RUNT \ load the next part of the source

( Plot and draw)

: RDRAW  ( inc-x inc-y -- )
  \ Draw a relative line (from the current plot position).
  SYS-Y-COORD C@ + SWAP SYS-X-COORD C@ + SWAP DRAW  ;

: XY>ATTRA  ( x y -- a )
  \ Convert a pixel coordinate to its attribute address.
  175 SWAP - 8 / 32 *  SWAP 8 /  + ATTRIBUTES +  ;

: COLORPLOT  ( color x y -- )
  \ Plot a pixel with the given color.
  \ There's a bug in Abersoft Forth: `PLOT` does not work
  \ when `INK` is used before. That's why this word
  \ is needed.
  2DUP PLOT XY>ATTRA C!  ;

( Font)

  \ The game fonts are loaded from tape at the end of the
  \ compilation.  Words are defined to switch them on and off:

768 CONSTANT /FONT  \ size in bytes
/FONT BUFFER: FONT

: +FONT  ( -- )
  \ Set the game font.
  [ FONT 256 - ] LITERAL SYS-CHARS ! ;

: -FONT  ( -- )
  \ Set the ROM font.
  15360 SYS-CHARS ! ;
  
  \ Double heigth digits are used to print the scores.
  \ Their top and low parts are switched instead
  \ of the game font when needed:

10 8 * CONSTANT /DIGITS-UDG  \ size in bytes
/DIGITS-UDG BUFFER: HI-DIGITS-UDG
/DIGITS-UDG BUFFER: LO-DIGITS-UDG

: +HI-DIGITS  ( -- )
  \ Set the high part of the double height digits
  \ as the current font.
  [ HI-DIGITS-UDG CHAR 0 BL - 8 * - 256 - ]
  LITERAL SYS-CHARS ! ;

: +LO-DIGITS  ( -- )
  \ Set the high part of the double height digits
  \ as the current font.
  [ HI-DIGITS-UDG CHAR 0 BL - 8 * - 256 - ]
  LITERAL SYS-CHARS ! ;

( UDG)

  \ User Defined Graphics are used for the Spanish and
  \ Esperanto characters. Two bank are used. They are loaded
  \ from tape at the end of the compilation. The correspondent
  \ UDG bank is switched when the user changes the language in
  \ the game menu.

12 8 * CONSTANT /EO-UDG  \ size in bytes
/EO-UDG BUFFER: EO-UDG

18 8 * CONSTANT /ES-UDG  \ size in bytes
/ES-UDG BUFFER: ES-UDG


HERE: UDG-BANK
  \ Addresses of the UDG banks used for every language:
  UDG , EO-UDG , ES-UDG ,

( Screen -- generic)

: WIPE  ( -- )
  \ Clear the screen with the default colors.
  BLACK PAPER  BLACK BORDER  WHITE INK  CLS  ;

  \ Size of the screen:
32 CONSTANT COLS
24 CONSTANT LINES

  \ Attributes address of the arena frame:
ATTRIBUTES CONSTANT TOP-FRAME-ATTRIBUTES
ATTRIBUTES COLS LINES 3 - * +
  CONSTANT BOTTOM-FRAME-ATTRIBUTES

( Center justified texts)

  \ XXX OLD
  \ : HOME  ( -- )  0 DUP AT  ;

: CENTERED  ( len -- column )
  \ Convert a string lenght to the column required
  \ to print the string centered.
  COLS SWAP - 2 /  ;

: <AT>  ( line len -- )
  \ Put the cursor on the given line, on the column
  \ required to center a text of the given lenght.
  CENTERED AT  ;

: <LINESPACES>  ( len line -- )
  \ Type spaces centered on a given line.
  OVER <AT> SPACES  ;

: <LINETYPE>  ( ca len line -- )
  \ Type a string centered on a given line.
  OVER <AT> TYPE  ;

: <TYPE>  ( ca len -- )

  \ Type a string centered on the current line.
 
  \ Note: the line is supposed to be empty, and it will be
  \ erased at the left of the text.
  
  \ XXX TODO Get the current line and call `<LINETYPE>`instead
  \ of printing spaces.

  DUP CENTERED SPACES TYPE  ;

( Title and status bar)

: TITLE  ( -- )
  RED INK S" TRON" <TYPE> CR CR WHITE INK  ;

  \ XXX OLD -- version with normal characters
  \ : SCORE. ( a color line column -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits.
  \ AT INK @ S->D <# # # # #> TYPE  ;

22 CONSTANT STATUS-LINE

  : SCORE. ( a column color -- )
  \ Print the content of a score variable,
  \ with the given color, at the given position,
  \ using 3 digits and double heigth characters. 
  INK >R
  STATUS-LINE R AT  @ S->D <# # # # #> 2DUP TYPE
  STATUS-LINE 1+ R> AT  TYPE  ;

: .SCORE1  ( -- )  SCORE1 0 COLOR1 SCORE.  ;
: .SCORE2  ( -- )  SCORE2 29 COLOR2 SCORE.  ;

: STATUS  ( -- )

  \ Show the status bar at the current cursor position.

  .SCORE1 .SCORE2 ;

( Arena)

RED RED PAPERY + CONSTANT FRAME-COLOR

: FRAME-BAR  ( a -- )  COLS FRAME-COLOR FILL  ;

: ARENA-BORDER  ( -- )

  \ Draw the arena visible border.

  TOP-FRAME-ATTRIBUTES FRAME-BAR  \ top part
  BOTTOM-FRAME-ATTRIBUTES FRAME-BAR  \ bottom part
  \ Left and right parts:
  BOTTOM-FRAME-ATTRIBUTES TOP-FRAME-ATTRIBUTES DO
    FRAME-COLOR DUP I C!  I [ COLS 1 - ] LITERAL + C!
  COLS +LOOP  ;

: ARENA-LIMIT  ( -- )

  \ XXX TODO Change the method:
  \ Use block graphics to draw a 4-pixel width border,
  \ and draw the bottom border with 4 lines, directly
  \ in memory.

  \ Draw the arena invisible limit.
  \ It's used to detect crashes.

  \ XXX OLD -- This draws the pixel line below X coordinate 0,
  \ but it doesn't work because it can not be detected by
  \ `PLOT`:
  \ 20673 [ COLS 2 - ] LITERAL 255 FILL

  7 7 PLOT 0 161 RDRAW 241 0 RDRAW 0 -161 RDRAW -241 0 RDRAW  ;
  

: FRAME  ( -- )  BLACK INK ARENA-LIMIT ARENA-BORDER  ;

: ARENA  ( -- )
  \ Draw the arena.
  WIPE FRAME STATUS  ;

  \ vim: filetype=abersoftforth:fileencoding=utf-8
