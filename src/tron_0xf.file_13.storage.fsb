.( Tron 0xF: storage )

\ tron_0xf.file_13.storage.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in fig-Forth with Abersoft Forth

\ http://programandala.net/en.program.tron_0xf.html

\ Copyright (C) 2015,2020 Marcos Cruz (programandala.net)
\ License: GPL 3

  \ Tron 0xF is free software; you can redistribute it
  \ and/or modify it under the terms of the GNU General Public
  \ License as published by the Free Software Foundation;
  \ either version 3 of the License, or (at your option) any
  \ later version.
  \
  \ Tron 0xF is distributed in the hope that it will be
  \ useful, but WITHOUT ANY WARRANTY; without even the implied
  \ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  \ PURPOSE.  See the GNU General Public License for more
  \ details.
  \
  \ You should have received a copy of the GNU General Public
  \ License along with Tron 0xF; if not, see
  \ <http://gnu.org/licenses>.

  \ -----------------------------------------------------------

  \ The author would be grateful for any constructive
  \ suggestions and bug-reports, via
  \ <http://programandala.net>.

  \ -----------------------------------------------------------
  \ Description

  \ This is the last Forth RAM-disk loaded from tape during the
  \ compilation of the game. Its space is used to store data
  \ (graphics directly loaded from tape and players data used
  \ during the game), with the following map:

  \ screen 5:           license note in English
  \                     license note in Esperanto
  \ screen 6:           license note in Spanish
  \                     license note in Interlingue
  \ screen 7:           copy of arena attributes (640 bytes)
  \                     82 bytes free
  \                     keys table (200 bytes)
  \                     players data (102 bytes)
  \
  \ screen 8:           game font (768 bytes)
  \                     Esperanto characters (96 bytes)
  \                     Spanish characters (144 bytes)
  \                     16 bytes free
  \
  \ screen 9:           double height digits (160 bytes)
  \                     UDG (144 bytes)
  \                     720 bytes free
  \
  \ screens 10 and 11:  graphic title (2048 bytes)

  \ -----------------------------------------------------------
  \ fsb directives

  \ The following '#vim' directives, processed by fsb,
  \ translate the UTF-8 chars in this source file to ZX
  \ Spectrum UDGs.

  \ Esperanto letters:
  \ #vim %substitute@Ĉ@\=nr2char(144)@g
  \ #vim %substitute@ĉ@\=nr2char(145)@g
  \ #vim %substitute@Ĝ@\=nr2char(146)@g
  \ #vim %substitute@ĝ@\=nr2char(147)@g
  \ #vim %substitute@Ĥ@\=nr2char(148)@g
  \ #vim %substitute@ĥ@\=nr2char(149)@g
  \ #vim %substitute@Ĵ@\=nr2char(150)@g
  \ #vim %substitute@ĵ@\=nr2char(151)@g
  \ #vim %substitute@Ŝ@\=nr2char(152)@g
  \ #vim %substitute@ŝ@\=nr2char(153)@g
  \ #vim %substitute@Ŭ@\=nr2char(154)@g
  \ #vim %substitute@ŭ@\=nr2char(155)@g

  \ Spanish and Interlingue letters:
  \ #vim %substitute@Á@\=nr2char(144)@g
  \ #vim %substitute@á@\=nr2char(145)@g
  \ #vim %substitute@É@\=nr2char(146)@g
  \ #vim %substitute@é@\=nr2char(147)@g
  \ #vim %substitute@Í@\=nr2char(148)@g
  \ #vim %substitute@í@\=nr2char(149)@g
  \ #vim %substitute@Ó@\=nr2char(150)@g
  \ #vim %substitute@ó@\=nr2char(151)@g
  \ #vim %substitute@Ú@\=nr2char(152)@g
  \ #vim %substitute@ú@\=nr2char(153)@g

  \ Spanish letters and signs:
  \ #vim %substitute@Ü@\=nr2char(154)@g
  \ #vim %substitute@ü@\=nr2char(155)@g
  \ #vim %substitute@Ñ@\=nr2char(156)@g
  \ #vim %substitute@ñ@\=nr2char(157)@g
  \ #vim %substitute@¿@\=nr2char(158)@g
  \ #vim %substitute@¡@\=nr2char(159)@g

  \ -----------------------------------------------------------

  \ The `tron` vocabulary must be activated, because it was
  \ changed to `forth` at the end of the previous module.
tron definitions

-->

( Load fonts, UDG sets and graphic title )

+scroll
font /font 0 0 <tape              \ main font
+scroll
eo-udg /eo-udg 0 0 <tape          \ Esperanto characters
+scroll
es-udg /es-udg 0 0 <tape          \ Spanish characters
+scroll
digits-udg /digits-udg 0 0 <tape  \ double height digits
+scroll
udg0 0 0 0 <tape                  \ frame graphs
+scroll
title-address 0 0 0 <tape         \ graphic title
+scroll

-->

( Fill the keyboard table )

  \ Every element of the `keys` table
  \ has the following structure:

  \ +0 = port of the keyboard row (2 bytes)
  \ +2 = bitmask of the key (2 bytes, but only the LSB is used)
  \ +4 = key name (1 byte), an ASCII character or an UDG

  \ Temporary word to compile the data of a key.
: k,  ( c n1 n2 -- )  , , c,  ;
  \ c = key name (1 byte), an ASCII character or an UDG
  \ n1 = bitmask of the key (2 bytes, but only the LSB is used)
  \ n2 = port of the keyboard row (2 bytes)

  \ The dictionary pointer is changed temporarily in order to
  \ compile the data into `keys` without using specific code.

  \ The keyboard rows are compiled in the following order:
  \ Row 1-5
  \ Row Q-T
  \ Row A-G
  \ Row CS-V  (0x98 = UDG for Caps Shift)
  \ Row 0-6
  \ Row P-Y
  \ Row Enter-H (0x99 = UDG for Enter)
  \ Row Space-B (0x9A = UDG for Space; 0x9B for Symbol Shift)

  \ The address of Caps Shift is stored in `caps-shift-key`
  \ because it's needed by the configuration menu.

here  keys dp !  hex char 1 01 F7FE k, char 2 02 F7FE k, char 3
04 F7FE k, char 4 08 F7FE k, char 5 10 F7FE k, char Q 01 FBFE
k, char W 02 FBFE k, char E 04 FBFE k, char R 08 FBFE k, char T
10 FBFE k, char A 01 FDFE k, char S 02 FDFE k, char D 04 FDFE
k, char F 08 FDFE k, char G 10 FDFE k, here to caps-shift-key
98 01 FEFE k, char Z 02 FEFE k, char X 04 FEFE k, char C 08
FEFE k, char V 10 FEFE k, char 0 01 EFFE k, char 9 02 EFFE k,
char 8 04 EFFE k, char 7 08 EFFE k, char 6 10 EFFE k, char P 01
DFFE k, char O 02 DFFE k, char I 04 DFFE k, char U 08 DFFE k,
char Y 10 DFFE k, 99 01 BFFE k, char L 02 BFFE k, char K 04
BFFE k, char J 08 BFFE k, char H 10 BFFE k, 9A 01 7FFE k,
9B 02 7FFE k, char M 04 7FFE k, char N 08 7FFE k, char B 10
7FFE k,

  \ Restore the dictionary pointer and forget the useless
  \ `key,`.

dp !  forget k,  decimal -->

( Init the players data, then boot )

players-data /players-data erase

robot pilot0 !  robot control0 !  yellow color0 !
human pilot1 !  human control1 !   green color1 !
robot pilot2 !  robot control2 !    cyan color2 !

  \ Temporary word to convert a key number to its address.
: key#>a  ( n -- a )  /key * keys +  ;

  \ The player keys could be initialized during the compilation
  \ of the keyboard table above, by storing the dictionary
  \ pointer into the correspondent player variable, but it
  \ looks cleaner this way.

  \ Player 0 default keys: 1=left, 2=right, 3=up, 4=down
  \ (Sinclair joystick)
0 key#>a left-k0 !  1 key#>a right-k0 !
2 key#>a up-k0 !    3 key#>a down-k0 !

  \ Player 1 default keys: 5=left, 6=down, 7=up, 8=right
  \ (cursor keys)
 4 key#>a left-k1 !  22 key#>a right-k1 !
23 key#>a up-k1 !    24 key#>a down-k1 !

  \ Player 2 default keys: K=left, B=up, M=down, X=right
  \ (central bottom keys on a Dvorak keyboard layout)
32 key#>a left-k2 !  17 key#>a right-k2 !
39 key#>a up-k2 !    37 key#>a down-k2 !

forget key#>a

  \ Stop loading and boot

  \ After the binary files have been loaded into the RAM-disk,
  \ and the other data has been stored into it, the loader must
  \ stop immediately, else it would erase the contents of the
  \ RAM-disk before loading the next RAM-disk from tape (see
  \ the Afera module <loader.fsb>). That's why the Afera module
  \ <loaded_execute.fsb> is not used to stop the loader at the
  \ end of the compilation.

  \ First method: make the loader stop and execute `run`:
  \ ' run cfa loaded !

  \ Second method: Clear the return stack and execute `run`:
rp! run

( License ) \ scr 5

  \ --------------------------->
Tron 0xF is free software; you  can redistribute it and/or
modify it under the terms of theGNU General Public License as
published by the Free Software  Foundation; either version 3 of
the License, or (at your option)any later version.
  \ --------------------------->
See the GNU General Public      License for more details:
<http://gnu.org/licenses>.
  \ --------------------------->
Tron 0xF estas libera; vi rajtasreliveri kaŭ modifi ĝin sub la
kondiĉoj de la GNU-a Ĝenerala   Publika Permesilo, publikigita
de Free Software Foundation     (Liber-Programara Fondaĵo), ĉu
versio 3 de la permesilo aŭ, je via prefero, iu posta versio.
  \ --------------------------->
Vidu la GNU-an Ĝeneralan        Publikan Permesilon por pliaj
detaloj:                        <http://gnu.org/licenses>.
  \ --------------------------->

( License ) \ scr 6

  \ --------------------------->
Tron 0xF es libre; puedes       redistribuirlo y modificarlo
bajo los términos de la LicenciaPública General GNU, publicada
por Free Software Foundation    (Fundación para los programas
libres), bien su versión 3 o, a tu criterio, otra posterior.
  \ --------------------------->
Para más detalles lee la        Licencia Pública General GNU:
<http://gnu.org/licenses>.
  \ --------------------------->
Tron 0xF es líber; vu posse     redistribuer e modificar it
sub li conditiones del Licentie Public General GNU, publicat
de Free Software Foundation     (Fundation por li programmas
líber), sive su version 3 o, je vor criterie, altri posteriori.
  \ --------------------------->
Por plu detallies, lee li       Licentie Publica General GNU:
<http://gnu.org/licenses>.
  \ --------------------------->

( ... ) \ screen 7

( ... ) \ screen 8

( ... ) \ screen 9

  \ vim: filetype=abersoftforthafera
