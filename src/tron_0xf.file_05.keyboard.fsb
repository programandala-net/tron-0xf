\ tron_0xf.file_05.keyboard.fsb

\ This file is part of
\ Tron 0xF
\ A ZX Spectrum game written in Abersoft Forth

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ Licencia/Permesilo/License: GPL 3

\ http://programandala.net/en.program.tron_0xf.html

.( Tron: keyboard )

2 10 THRU

( KEYS table )

40 CONSTANT #KEYS   \ number of keys of ZX Spectrum
 6 CONSTANT /KEY    \ bytes per key in the table

: SPECIAL-KEY-NAME  ( c1 c2 -- n )
  \ Convert two characters to a 16-bit number.
  256 * +  ;

HERE: KEYS

  \ Every element of the `KEYS` table 
  \ has the following structure:

  \ +0 = port of the keyboard row (2 bytes)
  \ +2 = bitmask of the key (2 bytes, but only the LSB is used)
  \ +4 = key name (2 bytes): one letter (the second byte is
  \      zero and will be ignored) or two letters.
  
  \ Keys are identified by their absolute address in the table.
  \ The players' default keys are set while the table is being
  \ compiled, by storing the dictionary pointer into a player
  \ variable.

HEX

( KEYS table, rows 1-5 Q-T )

                      HERE LEFT-K1 !   \ "1"
CHAR 1 01 F7FE , , ,  HERE RIGHT-K1 !  \ "2"
CHAR 2 02 F7FE , , ,  HERE UP-K1 !     \ "3"
CHAR 3 04 F7FE , , ,  HERE DOWN-K1 !   \ "4"
CHAR 4 08 F7FE , , ,
CHAR 5 10 F7FE , , , 

CHAR Q 01 FBFE , , ,
CHAR W 02 FBFE , , ,
CHAR E 04 FBFE , , ,
CHAR R 08 FBFE , , ,
CHAR T 10 FBFE , , ,

( KEYS table, rows A-G CS-V 0-6 )

CHAR A 01 FDFE , , ,
CHAR S 02 FDFE , , ,
CHAR D 04 FDFE , , ,
CHAR F 08 FDFE , , ,
CHAR G 10 FDFE , , ,

CHAR C CHAR S SPECIAL-KEY-NAME 01 FEFE , , ,  \ Caps Shift
CHAR Z 02 FEFE , , ,  HERE RIGHT-K3 ! \ "X"
CHAR X 04 FEFE , , ,
CHAR C 08 FEFE , , ,
CHAR V 10 FEFE , , ,

CHAR 0 01 EFFE , , ,  HERE DOWN-K2 !  \ "9"
CHAR 9 02 EFFE , , ,  HERE UP-K2 !    \ "8"
CHAR 8 04 EFFE , , ,  HERE RIGHT-K2 ! \ "7"
CHAR 7 08 EFFE , , ,  HERE LEFT-K2 !  \ "6"
CHAR 6 10 EFFE , , ,

( KEYS table, rows P-Y En-H )

CHAR P 01 DFFE , , ,
CHAR O 02 DFFE , , ,
CHAR I 04 DFFE , , ,
CHAR U 08 DFFE , , ,
CHAR Y 10 DFFE , , ,

CHAR E CHAR n SPECIAL-KEY-NAME 01 BFFE , , ,  \ Enter
CHAR L 02 BFFE , , ,  HERE LEFT-K3 !  \ "K"
CHAR K 04 BFFE , , ,
CHAR J 08 BFFE , , ,
CHAR H 10 BFFE , , ,

( KEYS table, row Sp-B )

CHAR S CHAR p SPECIAL-KEY-NAME 01 7FFE , , ,  \ Space
CHAR S CHAR S SPECIAL-KEY-NAME 02 7FFE , , ,  \ Symbol Shift
                      HERE DOWN-K3 !  \ "M"
CHAR M 04 7FFE , , ,
CHAR N 08 7FFE , , ,  HERE UP-K3 !    \ "B"
CHAR B 10 7FFE , , ,

DECIMAL

( K#>A KEY-NAME )

: K#>A  ( n -- a )
  \ Convert a key number to its address in `KEYS`.
  /KEY * KEYS +  ;

: C>S  ( c -- ca len )
  \ Convert a character to a string.
  PAD C! PAD 1  ;

: 2C>S  ( n1 -- ca len )
  \ Convert two characters to a string.
  \ high byte of n1 = first character
  \ low byte of n1 = second character
  PAD ! PAD 2  ;

: KEY-NAME  ( a -- ca len )
  \ Convert a key identifier to its key name.
  \ a = key address in the `KEYS` table
  4 + @ DUP 256 U< IF  C>S  ELSE  2C>S  THEN  ;

( PRESSED? PRESSED )

: PRESSED?  ( a -- f )
  \ Is a key pressed?
  \ a = key address in the `KEYS` table
  2@ INP AND 0=  ;

: (PRESSED)  ( -- a tf | ff )
  \ Check all keys.
  \ If a key is pressed, return its address in the
  \ `KEYS` table and a true flag, else return a false flag.
  FALSE  \ default
  [ KEYS #KEYS /KEY * BOUNDS SWAP ] LITERAL LITERAL DO
    I PRESSED? IF  DROP I TRUE LEAVE  THEN
  /KEY +LOOP  ;

: PRESSED  ( -- a )
  \ Check all keys forever until one of them is pressed
  \ and return its identifier.
  \ a = key address in the `KEYS` table
  BEGIN  (PRESSED) ?EXIT  AGAIN  ;

  \ vim: filetype=abersoftforth:fileencoding=utf-8
