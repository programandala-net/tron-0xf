\ Tron
\ A game written in ZX Spectrum's Abersoft Forth.

\ tron.file_3.fsb
\ This file is the 4th part of the source.

\ Copyright (C) 1985,2009,2015 Marcos Cruz (programandala.net)
\ Licencia/Permesilo/License: GPL 3

( Load )

2 10 THRU

( Keyboard)

: AKEY  ( -- c )
  \ Wait for a key press and return its code.  This is an
  \ alternative to Abersoft Forth's 'KEY', because it always
  \ shows the flashing cursor, even if the current attributes
  \ are changed.
  BEGIN  INKEY DUP 255 =  WHILE  DROP  REPEAT  ;

: PAUSE  ( -- )
  \ Wait for a key press.
  "PRESS-ANY-KEY" <TYPE> AKEY  ;

: UPPER  ( c -- c' )
  \ Convert a char in the range a-z to uppercase
  \ (Warning: no check!, chars other than a-z get corrupted).
  223 AND  ;

  \ Is the given char a valid answer for a Y/N question?
: Y/N?  ( c -- flag )  UPPER DUP 'Y' = SWAP 'N' = OR  ;

  \ Wait for a valid key press for a Y/N question
  \ and return its code.
: Y/N  ( -- c )  BEGIN  AKEY DUP Y/N? 0= WHILE DROP REPEAT  ;

  \ Wait for a valid key press for a Y/N question
  \ and return a flag: Was it "N" or "n"?
: NO?  ( -- flag )  Y/N UPPER 'N' =  ;

: PRESSED?  ( bitmask port -- flag )  INP AND NOT  ;

( Motorbikes; collisions )

  \ Plotting

: PAINT1  ( -- )  COLOR1 XC1 @ YC1 @ COLORPLOT 1 0 BLEEP  ;
: PAINT2  ( -- )  COLOR2 XC2 @ YC2 @ COLORPLOT 1 100 BLEEP  ;

  \ ----------------------------
  \ Collisions

: CRASH  ( -- )
  \ Crash effect.
  \ XXX OLD
  \ n = color of the player who crashed
  \  INK 1 BRIGHT 175 YC1 @ - 8 / XC1 @ 8 / AT SPACE
  100 50 DO  11 I BLEEP  LOOP  ;

  \ Update the scores
: +SCORE1  ( -- )  1 SCORE1 +! .SCORE1  ;
: +SCORE2  ( -- )  1 SCORE2 +! .SCORE2  ;

  \ Collisions
: CRASH1  ( -- )  CRASH +SCORE2  ;
: CRASH2  ( -- )  CRASH +SCORE1  ;

  \ Check collisions

  \ XXX abandoned method:
  \ 0 VARIABLE CRASHED?
  \ : CRASH?   ( x y -- flag )  POINT DUP CRASHED? !  ;
  \ : CRASH1?  ( -- flag )  XC1 @ YC1 @ CRASH?  ;
  \ : CRASH2?  ( -- flag )  XC2 @ YC2 @ CRASH?  ;

 \ : CRASH-WARNING  ( -- )  \ XXX INFORMER
 \  S" CRASH" 0 <LINETYPE> KEY DROP 5 0 <LINESPACES> ;
: CRASH1?  ( -- flag )  XC1 @ YC1 @ POINT  ;
: CRASH2?  ( -- flag )  XC2 @ YC2 @ POINT  ;

( Key identifiers)

HEX   1 DFFE 2CONSTANT K-P   1 BFFE 2CONSTANT K-EN
      4 7FFE 2CONSTANT K-M   8 7FFE 2CONSTANT K-N
      \ 1 FBFE 2CONSTANT K-Q 1 FDFE 2CONSTANT K-A
      \ 4 FEFE 2CONSTANT K-X 8 FEFE 2CONSTANT K-C
     10 F7FE 2CONSTANT K-5   4 EFFE 2CONSTANT K-8
      8 EFFE 2CONSTANT K-7  10 EFFE 2CONSTANT K-6   DECIMAL

( Player keys, coordinate increments)

  \ ----------------------------
  \ Player keys

  \ Player 1's keys (default)
  \ K-Q 2VARIABLE UP-K1    K-A 2VARIABLE DOWN-K1
  \ K-X 2VARIABLE LEFT-K1  K-C 2VARIABLE RIGHT-K1

  \ Player 1's keys (debugging)
K-7 2VARIABLE UP-K1    K-6 2VARIABLE DOWN-K1
K-5 2VARIABLE LEFT-K1  K-8 2VARIABLE RIGHT-K1

  \ Player 2's keys
K-P 2VARIABLE UP-K2 K-EN 2VARIABLE DOWN-K2
K-M 2VARIABLE LEFT-K2 K-N 2VARIABLE RIGHT-K2
 
  \ ----------------------------
 \ Coordinate increments
 
 \ XXX -- not used yet
 \ 0  1 2CONSTANT UP-INC
 \ 0 -1 2CONSTANT DOWN-INC
 \ -1  0 2CONSTANT LEFT-INC
 \ 0 -1 2CONSTANT RIGHT-INC

( Rudders)

: RUDDER?  ( a1 a2 -- flag )

  \ Is a key pressed and valid, given the current movement?

  \ a1 = doble variable that holds a key identifier
  \ a2 = variable that holds the current increment
  \   in the same axis of the key
  \ flag = is the key pressed, and the player is not already
  \   moving in that axis?

  @ NOT SWAP 2@ PRESSED? AND  ;

( Rudders)

: RUDDER1  ( -- n1 n2 )

  \ Update the coordinates of player 1.
  \
  \ XXX FIXME -- The new version of `exit` does not work fine
  \ yet, because when used before the first 3 `then`, the
  \ movement can be diagonal when several keys are pressed!  A
  \ `case` is used instead. But `exit` does work fine in
  \ similar tests.
  \
  \ XXX FIXME -- UPDATE: it happens the same with `case`!

  \ 0 15 AT XINC1 ? YINC1 ?  \ XXX INFORMER

  1 CASE
       UP-K1 YINC1 RUDDER? OF   0 XINC1 !  1 YINC1 !  ENDOF
     DOWN-K1 YINC1 RUDDER? OF   0 XINC1 ! -1 YINC1 !  ENDOF
     LEFT-K1 XINC1 RUDDER? OF  -1 XINC1 !  0 YINC1 !  ENDOF
    RIGHT-K1 XINC1 RUDDER? OF   1 XINC1 !  0 YINC1 !  ENDOF
  ENDCASE  XINC1 @ XC1 +!  YINC1 @ YC1 +!  ;

: RUDDER2  ( -- n1 n2 )

  \ Update the coordinates of player 2.

  1 CASE
       UP-K2 YINC2 RUDDER? OF   0 XINC2 !  1 YINC2 !  ENDOF
     DOWN-K2 YINC2 RUDDER? OF   0 XINC2 ! -1 YINC2 !  ENDOF
     LEFT-K2 XINC2 RUDDER? OF  -1 XINC2 !  0 YINC2 !  ENDOF
    RIGHT-K2 XINC2 RUDDER? OF   1 XINC2 !  0 YINC2 !  ENDOF
  ENDCASE  XINC2 @ XC2 +!  YINC2 @ YC2 +!  ;

( Stop)

  \ XXX TODO

: >ATTRIBUTES<  ( -- )
  \ Invert the screen attributes.
  ATTRIBUTES /ATTRIBUTES BOUNDS
  DO  I C@ INVERT 63 AND I C!  LOOP  ;
: FADE  ( -- )
  \ Fade the screen attributes by reducting the ink values.
  [ ATTRIBUTES /ATTRIBUTES BOUNDS SWAP ] LITERAL LITERAL
  DO  I C@ DUP 3 AND 1 - SWAP 248 AND OR I C!  LOOP  ;
: UNFADE  ( -- )
  \ Unfade the screen attributes by increasing the ink values.
  [ ATTRIBUTES /ATTRIBUTES BOUNDS SWAP ] LITERAL LITERAL
  DO  I C@ DUP 3 AND 1 + SWAP 248 AND OR I C!  LOOP  ;
: STOP  ( -- )
  \ Stop the game and ask what to do.
  >ATTRIBUTES<
  ;

( Game)

  \ ----------------------------
  \ Game init

: READY  ( -- )
  \ Reset the game variables.
  40 XC1 ! 88 YC1 ! 215 XC2 ! 88 YC2 !
  1 XINC1 ! 0 YINC1 ! -1 XINC2 ! 0 YINC2 ! ;

: GAME-INIT  ( -- )  ARENA READY PAINT1 PAINT2  ;

  \ XXX FIXME When the motorbike crashes the bottom border, the
  \ motorbike color contaminates the border. This doesn't
  \ happen with the the top, left or right borders.

: GAME  ( -- )
  GAME-INIT  BEGIN
    \ XXX TODO move PAINTx right after its THEN and save
    \ the variable updating before CRASH2
    \ RUDDER1 CRASH1? IF  CRASH1 EXIT  THEN
    RUDDER1 CRASH1? IF  CRASH1 EXIT  THEN  PAINT1
    RUDDER2 CRASH2? IF  CRASH2 EXIT  THEN  PAINT2
    \ XXX TMP -- player 2 commented out:
\    RUDDER2 CRASH2? IF  ( XC2 @ XC1 ! YC2 @ YC1 ! ) 
\      CRASH2 EXIT  THEN
    PAINT1 \ PAINT2
  ?TERMINAL UNTIL ;
  \ CRASHED? @ ?TERMINAL OR 
  \ DUP 20 3 AT .  \ XXX INFORMER
  \ UNTIL ;

( Main)

: START  ( -- )
  WIPE  TITLE CREDITS INSTRUCTIONS KEYS PAUSE
  0 SCORE1 !  0 SCORE2 !  ;

: ANOTHER?  ( -- flag )
  \ Another game?
  WHITE INK  "ANOTHER?" 12 <LINETYPE>  NO?  ;

: GAMING  ( -- )  BEGIN  GAME ANOTHER?  UNTIL  ;

: RUN  ( -- )  START GAMING FINISH  ;

  \ XXX TMP -- debugging message:
." Done!" CR ." Type RUN to start." CR

  \ vim: filetype=abersoftforth:fileencoding=utf-8
